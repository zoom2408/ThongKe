let defaultMainHTML = '';
if (typeof window !== 'undefined') {
  const initContainer = document.querySelector('.content.main');
  if (initContainer) defaultMainHTML = initContainer.innerHTML;

  function showTab(event, tabName) {
    const container = document.querySelector('.content.main');
    if (container && !document.getElementById(tabName)) {
      container.innerHTML = defaultMainHTML;
    }
    document.querySelectorAll('.page-link').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab').forEach(e => e.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(e => e.classList.remove('active'));
    if (event) event.currentTarget.classList.add('active');
    const target = document.getElementById(tabName);
    if (target) target.classList.add('active');
    if (tabName === 'quiz') resetQuiz();
  }

  function showExtra(card) {
    const extra = card.querySelector('.card-extra');
    if (!extra) return;
    extra.style.display = (extra.style.display === 'block') ? 'none' : 'block';
    card.classList.toggle('active');
  }

  function showOverlay() {
    const ov = document.getElementById("overlay");
    if (ov) ov.classList.add("active");
  }

  function hideOverlay() {
    const ov = document.getElementById("overlay");
    if (ov) ov.classList.remove("active");
  }

  function closeOverlay() {
    hideOverlay();
    if (typeof closeSEPanel === "function") closeSEPanel();
    if (typeof closeTestPanel === "function") closeTestPanel();
    if (typeof closeSidebar === "function") closeSidebar();
  }

  function openSidebar() {
    const sb = document.querySelector('.sidebar');

    if (sb) sb.classList.remove('open');
  }

  function toggleSidebar() {
    const sb = document.querySelector('.sidebar');
    if (!sb) return;
    if (sb.classList.contains('open')) {
      closeSidebar();
    } else {
      openSidebar();
    }
  }

  function loadPage(event, file, samePage = false) {
    const viewer = document.getElementById('viewer');
    if (viewer) {
      if (!samePage && file) {
        viewer.src = file;
      } else if (samePage) {
        viewer.src = viewer.getAttribute('data-default') || viewer.src;
      }
      document.querySelectorAll('.sidebar a').forEach(a => a.classList.remove('active'));
      if (event) event.currentTarget.classList.add('active');
      if (typeof closeSidebar === 'function') closeSidebar();
      return;
    }

    const container = document.querySelector('.content.main');
    if (!container) return;
    if (samePage) {
      container.innerHTML = defaultMainHTML;
    } else if (file) {
      container.innerHTML = `<iframe src="${file}" class="page-frame"></iframe>`;
    }
    document.querySelectorAll('.page-link').forEach(btn => btn.classList.remove('active'));
    if (event) event.currentTarget.classList.add('active');
    if (typeof closeSidebar === 'function') closeSidebar();
  }

}

        function showSection(sectionId) {
            const sections = document.querySelectorAll('.content-section, .section');
            sections.forEach(section => section.classList.remove('active'));

            const targetSection = document.getElementById(sectionId);
            if (targetSection) targetSection.classList.add('active');

            const tabs = document.querySelectorAll('.nav-btn, .tab');
            tabs.forEach(tab => tab.classList.remove('active'));

            if (event?.currentTarget) event.currentTarget.classList.add('active');

            if (sectionId === 'quiz' && typeof initializeQuiz === 'function' && !quizCompleted) {
                initializeQuiz();
            }
        }

        function toggleInterpretation(id) {
            const interpretation = document.getElementById(id);
            if (!interpretation) return;
            
            interpretation.classList.toggle('show');
            
            // ƒê√≥ng c√°c interpretation kh√°c
            const allInterpretations = document.querySelectorAll('.interpretation');
            allInterpretations.forEach(interp => {
                if (interp && interp.id !== id) {
                    interp.classList.remove('show');
                }
            });
        }

        function updatePracticeInterpretation() {
            const pvalInput = document.getElementById('pval-practice');
            const alphaInput = document.getElementById('alpha-practice');
            const cohendInput = document.getElementById('cohend-practice');
            const samplesizeInput = document.getElementById('samplesize-practice');
            const resultDiv = document.getElementById('practice-result');
            
            // Check if all elements exist
            if (!pvalInput || !alphaInput || !cohendInput || !samplesizeInput || !resultDiv) {
                console.log('Some input elements not found, skipping update');
                return;
            }
            
            const pval = parseFloat(pvalInput.value) || 0.032;
            const alpha = parseFloat(alphaInput.value) || 0.05;
            const cohend = parseFloat(cohendInput.value) || 0.65;
            const samplesize = parseInt(samplesizeInput.value) || 30;
            
            let significance = '';
            let effectMeaning = '';
            let powerComment = '';
            let practicalMeaning = '';
            
            // Di·ªÖn gi·∫£i p-value
            if (pval < 0.001) {
                significance = `
                    <div class="p-value-indicator significant">
                        p = ${pval} < 0.001 ‚ûú R·∫§T C√ì √ù NGHƒ®A TH·ªêNG K√ä ‚≠ê‚≠ê‚≠ê
                    </div>
                    <p><strong>K·∫øt lu·∫≠n:</strong> B√°c b·ªè H‚ÇÄ v·ªõi ƒë·ªô tin c·∫≠y r·∫•t cao. B·∫±ng ch·ª©ng th·ªëng k√™ r·∫•t m·∫°nh.</p>
                `;
            } else if (pval < 0.01) {
                significance = `
                    <div class="p-value-indicator significant">
                        p = ${pval} < 0.01 ‚ûú C√ì √ù NGHƒ®A TH·ªêNG K√ä CAO ‚≠ê‚≠ê
                    </div>
                    <p><strong>K·∫øt lu·∫≠n:</strong> B√°c b·ªè H‚ÇÄ. B·∫±ng ch·ª©ng th·ªëng k√™ m·∫°nh.</p>
                `;
            } else if (pval < alpha) {
                significance = `
                    <div class="p-value-indicator significant">
                        p = ${pval} < Œ± = ${alpha} ‚ûú C√ì √ù NGHƒ®A TH·ªêNG K√ä ‚≠ê
                    </div>
                    <p><strong>K·∫øt lu·∫≠n:</strong> B√°c b·ªè H‚ÇÄ. C√≥ b·∫±ng ch·ª©ng th·ªëng k√™ cho th·∫•y c√≥ s·ª± kh√°c bi·ªát/m·ªëi quan h·ªá c√≥ √Ω nghƒ©a.</p>
                `;
            } else {
                significance = `
                    <div class="p-value-indicator not-significant">
                        p = ${pval} ‚â• Œ± = ${alpha} ‚ûú KH√îNG C√ì √ù NGHƒ®A TH·ªêNG K√ä ‚ùå
                    </div>
                    <p><strong>K·∫øt lu·∫≠n:</strong> Kh√¥ng b√°c b·ªè H‚ÇÄ. Kh√¥ng c√≥ ƒë·ªß b·∫±ng ch·ª©ng th·ªëng k√™.</p>
                `;
            }
            
            // Di·ªÖn gi·∫£i Effect Size
            if (cohend < 0.2) {
                effectMeaning = `<span style="color: #6c757d;">R·∫•t nh·ªè</span> - Kh√°c bi·ªát kh√¥ng ƒë√°ng k·ªÉ v·ªÅ m·∫∑t th·ª±c ti·ªÖn`;
                practicalMeaning = "M·∫∑c d√π c√≥ th·ªÉ c√≥ √Ω nghƒ©a th·ªëng k√™, nh∆∞ng kh√°c bi·ªát qu√° nh·ªè ƒë·ªÉ c√≥ √Ω nghƒ©a th·ª±c ti·ªÖn.";
            } else if (cohend < 0.5) {
                effectMeaning = `<span style="color: #ffc107;">Nh·ªè</span> - Kh√°c bi·ªát nh·ªè v·ªÅ m·∫∑t th·ª±c ti·ªÖn`;
                practicalMeaning = "Kh√°c bi·ªát c√≥ th·ªÉ ƒë∆∞·ª£c ph√°t hi·ªán, nh∆∞ng t√°c ƒë·ªông th·ª±c ti·ªÖn h·∫°n ch·∫ø.";
            } else if (cohend < 0.8) {
                effectMeaning = `<span style="color: #fd7e14;">Trung b√¨nh</span> - Kh√°c bi·ªát v·ª´a ph·∫£i v·ªÅ m·∫∑t th·ª±c ti·ªÖn`;
                practicalMeaning = "Kh√°c bi·ªát c√≥ √Ω nghƒ©a th·ª±c ti·ªÖn r√µ r√†ng v√† c√≥ th·ªÉ quan tr·ªçng trong th·ª±c t·∫ø.";
            } else {
                effectMeaning = `<span style="color: #dc3545;">L·ªõn</span> - Kh√°c bi·ªát l·ªõn v·ªÅ m·∫∑t th·ª±c ti·ªÖn`;
                practicalMeaning = "Kh√°c bi·ªát r·∫•t l·ªõn v·ªõi t√°c ƒë·ªông th·ª±c ti·ªÖn m·∫°nh m·∫Ω v√† quan tr·ªçng.";
            }
            
            // Nh·∫≠n x√©t v·ªÅ c·ª° m·∫´u
            if (samplesize < 30) {
                powerComment = `<span style="color: #dc3545;">C·ª° m·∫´u nh·ªè (n=${samplesize})</span> - S·ª©c m·∫°nh th·ªëng k√™ c√≥ th·ªÉ th·∫•p. C√¢n nh·∫Øc s·ª≠ d·ª•ng test phi tham s·ªë.`;
            } else if (samplesize < 100) {
                powerComment = `<span style="color: #ffc107;">C·ª° m·∫´u v·ª´a ph·∫£i (n=${samplesize})</span> - S·ª©c m·∫°nh th·ªëng k√™ ·ªïn ƒë·ªãnh.`;
            } else {
                powerComment = `<span style="color: #28a745;">C·ª° m·∫´u l·ªõn (n=${samplesize})</span> - S·ª©c m·∫°nh th·ªëng k√™ cao. L∆∞u √Ω: v·ªõi c·ª° m·∫´u l·ªõn, ngay c·∫£ kh√°c bi·ªát nh·ªè c≈©ng c√≥ th·ªÉ c√≥ √Ω nghƒ©a th·ªëng k√™.`;
            }
            
            // G·ª£i √Ω h√†nh ƒë·ªông
            let actionSuggestion = '';
            if (pval < alpha && cohend >= 0.5) {
                actionSuggestion = 'üéâ <strong>K·∫øt qu·∫£ tuy·ªát v·ªùi!</strong> V·ª´a c√≥ √Ω nghƒ©a th·ªëng k√™ v·ª´a c√≥ √Ω nghƒ©a th·ª±c ti·ªÖn. C√≥ th·ªÉ tin t∆∞·ªüng √°p d·ª•ng k·∫øt qu·∫£.';
            } else if (pval < alpha && cohend < 0.5) {
                actionSuggestion = '‚ö†Ô∏è <strong>C·∫©n th·∫≠n:</strong> C√≥ √Ω nghƒ©a th·ªëng k√™ nh∆∞ng effect size nh·ªè. C·∫ßn ƒë√°nh gi√° k·ªπ t√≠nh th·ª±c ti·ªÖn.';
            } else if (pval >= alpha && cohend >= 0.5) {
                actionSuggestion = 'ü§î <strong>Th√∫ v·ªã:</strong> Effect size l·ªõn nh∆∞ng kh√¥ng c√≥ √Ω nghƒ©a th·ªëng k√™. C√≥ th·ªÉ c·∫ßn tƒÉng c·ª° m·∫´u.';
            } else {
                actionSuggestion = 'üìä <strong>Kh√¥ng c√≥ b·∫±ng ch·ª©ng:</strong> C·∫£ √Ω nghƒ©a th·ªëng k√™ v√† effect size ƒë·ªÅu th·∫•p. C√≥ th·ªÉ c·∫ßn thi·∫øt k·∫ø l·∫°i nghi√™n c·ª©u.';
            }
            
            resultDiv.innerHTML = `
                <h5>üéØ K·∫øt qu·∫£ di·ªÖn gi·∫£i chi ti·∫øt:</h5>
                
                <div style="margin: 15px 0;">
                    <h6>üìä √ù nghƒ©a th·ªëng k√™:</h6>
                    ${significance}
                </div>
                
                <div style="margin: 15px 0;">
                    <h6>üìè Effect Size:</h6>
                    <p><strong>Cohen's d = ${cohend}</strong> ‚Üí ${effectMeaning}</p>
                    <p style="font-size: 0.9rem; color: #6c757d;">${practicalMeaning}</p>
                </div>
                
                <div style="margin: 15px 0;">
                    <h6>üë• C·ª° m·∫´u:</h6>
                    <p>${powerComment}</p>
                </div>
                
                <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin-top: 15px;">
                    <h6>üí° G·ª£i √Ω h√†nh ƒë·ªông:</h6>
                    <p>${actionSuggestion}</p>
                </div>
                
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 15px;">
                    <h6>üìù M·∫´u b√°o c√°o APA:</h6>
                    <p style="font-style: italic;">
                        "K·∫øt qu·∫£ cho th·∫•y ${pval < alpha ? 'c√≥ s·ª± kh√°c bi·ªát c√≥ √Ω nghƒ©a th·ªëng k√™' : 'kh√¥ng c√≥ s·ª± kh√°c bi·ªát c√≥ √Ω nghƒ©a th·ªëng k√™'} 
                        gi·ªØa c√°c nh√≥m (p ${pval < 0.001 ? '< .001' : pval < 0.01 ? '< .01' : pval < 0.05 ? '< .05' : '= ' + pval.toFixed(3)}, 
                        Cohen's d = ${cohend}, n = ${samplesize})."
                    </p>
                </div>
            `;
        }

        // Kh·ªüi t·∫°o an to√†n
        document.addEventListener('DOMContentLoaded', function() {
            try {
                // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ elements ƒë√£ ƒë∆∞·ª£c render
                setTimeout(() => {
                    updatePracticeInterpretation();
                }, 100);
            } catch (error) {
                console.log('Error during initialization:', error);
            }
        });

        // Fallback cho tr∆∞·ªùng h·ª£p DOMContentLoaded ƒë√£ fire
        if (document.readyState === 'loading') {
            // DOM ch∆∞a load xong, ch·ªù DOMContentLoaded
        } else {
            // DOM ƒë√£ load xong, ch·∫°y ngay
            setTimeout(() => {
                try {
                    updatePracticeInterpretation();
                } catch (error) {
                    console.log('Error during fallback initialization:', error);
                }
            }, 100);
        }
        // Quiz data
        const quizData = [
            {
                question: "Th·ªëng k√™ m√¥ t·∫£ c√≥ vai tr√≤ g√¨ trong nghi√™n c·ª©u t√¢m l√Ω?",
                options: ["Ki·ªÉm tra gi·∫£ thuy·∫øt", "T√≥m t·∫Øt ƒë·∫ßy ƒë·ªß v·ªÅ d·ªØ li·ªáu", "Suy lu·∫≠n v·ªÅ d√¢n s·ªë", "Ph√°t tri·ªÉn l√Ω thuy·∫øt"],
                correct: 1
            },
            {
                question: "ƒêi·ªÅu ki·ªán c·∫ßn thi·∫øt ƒë·ªÉ th·ªëng k√™ suy lu·∫≠n c√≥ gi√° tr·ªã l√† g√¨?",
                options: ["M·∫´u l·ªõn", "M·∫´u ƒë∆∞·ª£c thu th·∫≠p ng·∫´u nhi√™n", "D·ªØ li·ªáu ph√¢n ph·ªëi chu·∫©n", "C√≥ nhi·ªÅu bi·∫øn"],
                correct: 1
            },
            {
                question: "ƒê·ªô l·ªách chu·∫©n SD = 2.5 trong nghi√™n c·ª©u v·ªÅ ƒëi·ªÉm stress c√≥ nghƒ©a l√† g√¨?",
                options: ["T·∫•t c·∫£ ng∆∞·ªùi c√≥ stress = 2.5", "68% ng∆∞·ªùi c√≥ ƒëi·ªÉm stress trong kho·∫£ng M¬±2.5", "Ch·ªâ c√≥ 2.5% ng∆∞·ªùi tham gia", "Nghi√™n c·ª©u k√©o d√†i 2.5 nƒÉm"],
                correct: 1
            },
            {
                question: "Khi SD l·ªõn (>15), ƒëi·ªÅu n√†y cho th·∫•y:",
                options: ["D·ªØ li·ªáu t·∫≠p trung quanh mean", "D·ªØ li·ªáu r·∫•t ph√¢n t√°n, c√≥ th·ªÉ c√≥ outliers", "Nghi√™n c·ª©u r·∫•t ch√≠nh x√°c", "K√≠ch th∆∞·ªõc m·∫´u qu√° nh·ªè"],
                correct: 1
            },
            {
                question: "Thang ƒëo n√†o cho ph√©p th·ª±c hi·ªán ƒë·∫ßy ƒë·ªß c√°c ph√©p to√°n +, -, √ó, √∑?",
                options: ["Thang ƒëo ƒë·ªãnh danh", "Thang ƒëo th·ª© b·∫≠c", "Thang ƒëo kho·∫£ng", "Thang ƒëo t·ªâ l·ªá"],
                correct: 3
            },
            {
                question: "Trong chu·ªói [1, 2, 2, 3, 4, 5], s·ªë trung v·ªã (median) l√† bao nhi√™u?",
                options: ["2", "2.5", "2.83", "3"],
                correct: 1
            },
            {
                question: "Khi b√°o c√°o Mean = 7.2, SD = 1.8, c√°ch di·ªÖn gi·∫£i ƒë√∫ng l√†:",
                options: ["T·∫•t c·∫£ gi√° tr·ªã ƒë·ªÅu b·∫±ng 7.2", "68% gi√° tr·ªã n·∫±m trong kho·∫£ng 5.4-9.0", "C√≥ 1.8% d·ªØ li·ªáu b·ªã sai", "Mean ch·ªâ ch√≠nh x√°c v·ªõi sai s·ªë 1.8"],
                correct: 1
            },
            {
                question: "ƒêi·ªÉm trung b√¨nh c·ªßa chu·ªói [10, 10, 40, 30, 10] l√†:",
                options: ["20", "18", "22", "15"],
                correct: 0
            },
            {
                question: "Correlation r = 0.8 c√≥ nghƒ©a l√†:",
                options: ["M·ªëi quan h·ªá y·∫øu", "M·ªëi quan h·ªá m·∫°nh", "80% d·ªØ li·ªáu ch√≠nh x√°c", "C√≥ 0.8% sai s·ªë"],
                correct: 1
            },
            {
                question: "Ph√¢n ph·ªëi chu·∫©n c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
                options: ["Mean > Median > Mode", "Mean = Median = Mode", "Mean < Median < Mode", "Kh√¥ng c√≥ quy lu·∫≠t"],
                correct: 1
            },
            {
                question: "B∆∞·ªõc ƒë·∫ßu ti√™n trong quy tr√¨nh ph√¢n t√≠ch d·ªØ li·ªáu nghi√™n c·ª©u l√† g√¨?",
                options: ["Ch·∫°y ki·ªÉm ƒë·ªãnh th·ªëng k√™", "L√†m s·∫°ch v√† m√¥ t·∫£ d·ªØ li·ªáu", "Di·ªÖn gi·∫£i k·∫øt qu·∫£", "Vi·∫øt b√°o c√°o"],
                correct: 1
            },
            {
                question: "P-value < 0.05 c√≥ nghƒ©a l√†:",
                options: ["K·∫øt qu·∫£ c√≥ √Ω nghƒ©a th·ªëng k√™", "5% d·ªØ li·ªáu b·ªã sai", "C·∫ßn 5% m·∫´u th√™m", "ƒê·ªô tin c·∫≠y ch·ªâ 5%"],
                correct: 0
            },
            {
                question: "ƒê·ªÉ ki·ªÉm tra ph√¢n ph·ªëi chu·∫©n, ta th∆∞·ªùng d√πng test n√†o?",
                options: ["t-test", "ANOVA", "Shapiro-Wilk test", "Chi-square test"],
                correct: 2
            },
            {
                question: "Trong ph√¢n ph·ªëi l·ªách d∆∞∆°ng, th·ª© t·ª± t·ª´ tr√°i sang ph·∫£i c·ªßa Mode, Median, Mean l√†:",
                options: ["Mode < Median < Mean", "Mean < Median < Mode", "Mode = Median = Mean", "Median < Mode < Mean"],
                correct: 0
            },
            {
                question: "Sample size N = 25 ƒë∆∞·ª£c coi l√†:",
                options: ["M·∫´u l·ªõn, r·∫•t tin c·∫≠y", "M·∫´u nh·ªè, c·∫ßn c·∫©n th·∫≠n v·ªõi assumption", "M·∫´u v·ª´a ph·∫£i", "M·∫´u qu√° l·ªõn"],
                correct: 1
            },
            {
                question: "Khi so s√°nh 2 nh√≥m ƒë·ªôc l·∫≠p v·ªõi d·ªØ li·ªáu ph√¢n ph·ªëi chu·∫©n, n√™n d√πng:",
                options: ["One-sample t-test", "Independent samples t-test", "Mann-Whitney U test", "Paired t-test"],
                correct: 1
            },
            {
                question: "Variance v√† Standard Deviation c√≥ m·ªëi quan h·ªá:",
                options: ["Variance = SD¬≤", "SD = Variance¬≤", "Kh√¥ng li√™n quan", "SD = 2√óVariance"],
                correct: 0
            },
            {
                question: "Khi d·ªØ li·ªáu kh√¥ng ph√¢n ph·ªëi chu·∫©n v√† c·∫ßn so s√°nh 2 nh√≥m ƒë·ªôc l·∫≠p:",
                options: ["Independent t-test", "Mann-Whitney U test", "Paired t-test", "ANOVA"],
                correct: 1
            },
            {
                question: "Outlier th∆∞·ªùng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l√† gi√° tr·ªã c√≥ Z-score:",
                options: ["< ¬±1.96", "> ¬±2.58", "> ¬±3.29", "< ¬±0.05"],
                correct: 2
            },
            {
                question: "ƒêi·ªÅu g√¨ c·∫ßn l√†m ƒë·∫ßu ti√™n tr∆∞·ªõc khi ph√¢n t√≠ch th·ªëng k√™ suy lu·∫≠n?",
                options: ["Ki·ªÉm ƒë·ªãnh gi·∫£ thuy·∫øt", "M√¥ t·∫£ d·ªØ li·ªáu v√† ki·ªÉm tra assumption", "T√≠nh t∆∞∆°ng quan", "V·∫Ω bi·ªÉu ƒë·ªì"],
                correct: 1
            }
        ];

        let currentQuestion = 0;
        let userAnswers = [];
        let quizCompleted = false;


        function calculateStats() {
            const input = document.getElementById('numbers').value;
            const numbers = input.split(',').map(n => parseFloat(n.trim())).filter(n => !isNaN(n));
            
            if (numbers.length === 0) {
                alert('Vui l√≤ng nh·∫≠p c√°c s·ªë h·ª£p l·ªá');
                return;
            }
            
            // Calculate statistics
            const sum = numbers.reduce((a, b) => a + b, 0);
            const mean = sum / numbers.length;
            
            const sortedNumbers = [...numbers].sort((a, b) => a - b);
            let median;
            if (sortedNumbers.length % 2 === 0) {
                median = (sortedNumbers[sortedNumbers.length/2 - 1] + sortedNumbers[sortedNumbers.length/2]) / 2;
            } else {
                median = sortedNumbers[Math.floor(sortedNumbers.length/2)];
            }
            
            // Find mode
            const frequency = {};
            numbers.forEach(num => {
                frequency[num] = (frequency[num] || 0) + 1;
            });
            const maxFreq = Math.max(...Object.values(frequency));
            const modes = Object.keys(frequency).filter(key => frequency[key] === maxFreq);
            const mode = modes.length === numbers.length ? 'Kh√¥ng c√≥' : modes.join(', ');
            
            // Calculate standard deviation
            const variance = numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0) / numbers.length;
            const standardDeviation = Math.sqrt(variance);
            
            const result = `
                <strong>K·∫øt qu·∫£ t√≠nh to√°n:</strong><br>
                D√£y s·ªë: [${numbers.join(', ')}]<br>
                Mean (Trung b√¨nh): ${mean.toFixed(2)}<br>
                Median (Trung v·ªã): ${median}<br>
                Mode (Y·∫øu v·ªã): ${mode}<br>
                Standard Deviation: ${standardDeviation.toFixed(2)}<br>
                Variance (Ph∆∞∆°ng sai): ${variance.toFixed(2)}
            `;
            
            document.getElementById('statsResult').innerHTML = result;
            document.getElementById('statsResult').style.display = 'block';
        }

        function clearCalculator() {
            document.getElementById('numbers').value = '';
            document.getElementById('statsResult').style.display = 'none';
        }

        function updateRecommendation() {
            const purpose = document.getElementById('purpose').value;
            const independent = document.getElementById('independent').value;
            const dataType = document.getElementById('dataType').value;
            const groups = document.getElementById('groups').value;
            const normality = document.getElementById('normality').value;
            
            let recommendation = '';
            let reasoning = '';
            
            if (purpose && dataType) {
                if (purpose === 'compare') {
                    if (dataType === 'continuous') {
                        if (groups === '1') {
                            if (normality === 'yes') {
                                recommendation = '<strong>One-sample t-test</strong>';
                                reasoning = 'So s√°nh 1 nh√≥m v·ªõi gi√° tr·ªã chu·∫©n, d·ªØ li·ªáu ph√¢n ph·ªëi chu·∫©n';
                            } else if (normality === 'no') {
                                recommendation = '<strong>Wilcoxon signed-rank test</strong>';
                                reasoning = 'So s√°nh 1 nh√≥m v·ªõi gi√° tr·ªã chu·∫©n, d·ªØ li·ªáu kh√¥ng ph√¢n ph·ªëi chu·∫©n';
                            }
                        } else if (groups === '2') {
                            if (normality === 'yes') {
                                recommendation = '<strong>Independent samples t-test</strong> ho·∫∑c <strong>Paired samples t-test</strong>';
                                reasoning = 'Ch·ªçn Independent n·∫øu 2 nh√≥m ƒë·ªôc l·∫≠p, Paired n·∫øu c√πng ƒë·ªëi t∆∞·ª£ng ƒëo 2 l·∫ßn';
                            } else if (normality === 'no') {
                                recommendation = '<strong>Mann-Whitney U test</strong> ho·∫∑c <strong>Wilcoxon signed-rank test</strong>';
                                reasoning = 'Mann-Whitney cho nh√≥m ƒë·ªôc l·∫≠p, Wilcoxon cho nh√≥m ph·ª• thu·ªôc';
                            }
                        } else if (groups === 'multiple') {
                            if (normality === 'yes') {
                                recommendation = '<strong>One-way ANOVA</strong>';
                                reasoning = 'So s√°nh nhi·ªÅu nh√≥m, d·ªØ li·ªáu ph√¢n ph·ªëi chu·∫©n';
                            } else if (normality === 'no') {
                                recommendation = '<strong>Kruskal-Wallis test</strong>';
                                reasoning = 'So s√°nh nhi·ªÅu nh√≥m, d·ªØ li·ªáu kh√¥ng ph√¢n ph·ªëi chu·∫©n';
                            }
                        }
                    } else if (dataType === 'categorical') {
                        recommendation = '<strong>Chi-square test</strong>';
                        reasoning = 'So s√°nh t·ª∑ l·ªá gi·ªØa c√°c nh√≥m v·ªõi d·ªØ li·ªáu ph√¢n lo·∫°i';
                    }
                } else if (purpose === 'relationship') {
                    if (dataType === 'continuous') {
                        if (independent === '1') {
                            if (normality === 'yes') {
                                recommendation = '<strong>Pearson correlation</strong>';
                                reasoning = 'T∆∞∆°ng quan gi·ªØa 2 bi·∫øn li√™n t·ª•c, ph√¢n ph·ªëi chu·∫©n';
                            } else if (normality === 'no') {
                                recommendation = '<strong>Spearman correlation</strong>';
                                reasoning = 'T∆∞∆°ng quan gi·ªØa 2 bi·∫øn, d·ªØ li·ªáu kh√¥ng ph√¢n ph·ªëi chu·∫©n';
                            }
                        } else if (independent === 'multiple') {
                            recommendation = '<strong>Multiple correlation/Partial correlation</strong>';
                            reasoning = 'T∆∞∆°ng quan gi·ªØa nhi·ªÅu bi·∫øn';
                        }
                    } else if (dataType === 'ordinal') {
                        recommendation = '<strong>Spearman correlation</strong>';
                        reasoning = 'T∆∞∆°ng quan v·ªõi d·ªØ li·ªáu th·ª© b·∫≠c';
                    }
                } else if (purpose === 'predict') {
                    if (dataType === 'continuous') {
                        if (independent === '1') {
                            recommendation = '<strong>Simple Linear Regression</strong>';
                            reasoning = 'D·ª± b√°o bi·∫øn li√™n t·ª•c t·ª´ 1 bi·∫øn d·ª± b√°o';
                        } else if (independent === 'multiple') {
                            recommendation = '<strong>Multiple Linear Regression</strong>';
                            reasoning = 'D·ª± b√°o bi·∫øn li√™n t·ª•c t·ª´ nhi·ªÅu bi·∫øn d·ª± b√°o';
                        }
                    } else if (dataType === 'categorical') {
                        recommendation = '<strong>Logistic Regression</strong>';
                        reasoning = 'D·ª± b√°o bi·∫øn ph√¢n lo·∫°i (binary ho·∫∑c multinomial)';
                    }
                }
                
                if (recommendation) {
                    document.getElementById('testRecommendation').innerHTML = `
                        <h4>üéØ Ki·ªÉm ƒë·ªãnh ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t:</h4>
                        <p style="font-size: 1.2em; color: #2d5a2d; margin: 10px 0;">${recommendation}</p>
                        <p><strong>L√Ω do:</strong> ${reasoning}</p>
                        <div style="margin-top: 15px; padding: 10px; background: #e3f2fd; border-radius: 5px;">
                            <strong>üí° Checklist tr∆∞·ªõc khi ch·∫°y:</strong><br>
                            ‚úì Ki·ªÉm tra missing data<br>
                            ‚úì Lo·∫°i b·ªè outliers (n·∫øu c·∫ßn)<br>
                            ‚úì Ki·ªÉm tra assumption c·ªßa test<br>
                            ‚úì T√≠nh effect size
                        </div>
                    `;
                    document.getElementById('testRecommendation').style.display = 'block';
                } else {
                    document.getElementById('testRecommendation').style.display = 'none';
                }
            } else {
                document.getElementById('testRecommendation').style.display = 'none';
            }
        }

        function interpretSD() {
            const mean = parseFloat(document.getElementById('meanInput').value);
            const sd = parseFloat(document.getElementById('sdInput').value);
            
            if (isNaN(mean) || isNaN(sd) || sd <= 0) {
                alert('Vui l√≤ng nh·∫≠p gi√° tr·ªã h·ª£p l·ªá');
                return;
            }
            
            // Calculate ranges
            const oneSdLower = mean - sd;
            const oneSdUpper = mean + sd;
            const twoSdLower = mean - (2 * sd);
            const twoSdUpper = mean + (2 * sd);
            
            // Determine SD interpretation
            let sdLevel = '';
            let sdColor = '';
            let interpretation = '';
            
            if (sd <= 5) {
                sdLevel = 'TH·∫§P - D·ªØ li·ªáu ƒë·ªìng ƒë·ªÅu';
                sdColor = '#c6f6d5';
                interpretation = 'D·ªØ li·ªáu r·∫•t t·∫≠p trung quanh gi√° tr·ªã trung b√¨nh. Nh√≥m nghi√™n c·ª©u c√≥ ƒë·∫∑c ƒëi·ªÉm t∆∞∆°ng ƒë·ªëi ƒë·ªìng nh·∫•t.';
            } else if (sd <= 15) {
                sdLevel = 'TRUNG B√åNH - D·ªØ li·ªáu c√¢n b·∫±ng';
                sdColor = '#bee3f8';
                interpretation = 'M·ª©c ƒë·ªô bi·∫øn thi√™n b√¨nh th∆∞·ªùng. D·ªØ li·ªáu c√≥ s·ª± ph√¢n t√°n h·ª£p l√Ω v√† ph√π h·ª£p cho h·∫ßu h·∫øt ph√¢n t√≠ch th·ªëng k√™.';
            } else {
                sdLevel = 'CAO - D·ªØ li·ªáu ph√¢n t√°n';
                sdColor = '#fed7d7';
                interpretation = 'D·ªØ li·ªáu r·∫•t ph√¢n t√°n. C·∫ßn ki·ªÉm tra outliers v√† xem x√©t vi·ªác chia nh√≥m ph·ª• ho·∫∑c s·ª≠ d·ª•ng median thay v√¨ mean.';
            }
            
            const result = `
                <div style="background: ${sdColor}; padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <h4>üìä Ph√¢n t√≠ch ƒë·ªô l·ªách chu·∫©n: SD = ${sd}</h4>
                    <p><strong>M·ª©c ƒë·ªô:</strong> ${sdLevel}</p>
                    <p><strong>Gi·∫£i th√≠ch:</strong> ${interpretation}</p>
                </div>
                
                <div style="background: #f7fafc; padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <h4>üìè Ph·∫°m vi d·ª± ƒëo√°n:</h4>
                    <p><strong>68% d·ªØ li·ªáu n·∫±m trong:</strong> ${oneSdLower.toFixed(1)} - ${oneSdUpper.toFixed(1)}</p>
                    <p><strong>95% d·ªØ li·ªáu n·∫±m trong:</strong> ${twoSdLower.toFixed(1)} - ${twoSdUpper.toFixed(1)}</p>
                </div>
                
                <div style="background: #e6fffa; padding: 15px; border-radius: 8px; margin: 10px 0; border-left: 4px solid #38b2ac;">
                    <h4>üí° √ù nghƒ©a th·ª±c t·∫ø:</h4>
                    <p>V·ªõi Mean = ${mean} v√† SD = ${sd}:</p>
                    <ul style="margin-left: 20px;">
                        <li>N·∫øu b·∫°n ch·ªçn ng·∫´u nhi√™n 1 ng∆∞·ªùi t·ª´ nh√≥m n√†y, c√≥ 68% kh·∫£ nƒÉng gi√° tr·ªã c·ªßa h·ªç n·∫±m trong kho·∫£ng ${oneSdLower.toFixed(1)} - ${oneSdUpper.toFixed(1)}</li>
                        <li>Gi√° tr·ªã ${(mean + sd).toFixed(1)} ƒë∆∞·ª£c coi l√† "cao h∆°n trung b√¨nh 1 ƒë·ªô l·ªách chu·∫©n"</li>
                        <li>Gi√° tr·ªã ${(mean - sd).toFixed(1)} ƒë∆∞·ª£c coi l√† "th·∫•p h∆°n trung b√¨nh 1 ƒë·ªô l·ªách chu·∫©n"</li>
                    </ul>
                </div>
                
                <div style="background: #fff5cd; padding: 15px; border-radius: 8px; margin: 10px 0; border-left: 4px solid #ecc94b;">
                    <h4>üìù C√°ch vi·∫øt trong b√°o c√°o:</h4>
                    <p><em>"K·∫øt qu·∫£ cho th·∫•y gi√° tr·ªã trung b√¨nh l√† ${mean} (SD = ${sd}), cho th·∫•y ${interpretation.toLowerCase()} D·ªØ li·ªáu ƒë∆∞·ª£c ph√¢n ph·ªëi v·ªõi 68% gi√° tr·ªã n·∫±m trong kho·∫£ng ${oneSdLower.toFixed(1)} ƒë·∫øn ${oneSdUpper.toFixed(1)}."</em></p>
                </div>
            `;
            
            document.getElementById('sdInterpretation').innerHTML = result;
            document.getElementById('sdInterpretation').style.display = 'block';
        }

        function initializeQuiz() {
            currentQuestion = 0;
            userAnswers = [];
            quizCompleted = false;
            document.getElementById('finalScore').style.display = 'none';
            displayQuestion();
        }

        function displayQuestion() {
            const question = quizData[currentQuestion];
            const questionsContainer = document.getElementById('quizQuestions');
            
            questionsContainer.innerHTML = `
                <div class="question">
                    <h3>C√¢u ${currentQuestion + 1}: ${question.question}</h3>
                    <div class="options">
                        ${question.options.map((option, index) => `
                            <div class="option" onclick="selectOption(${index})">
                                <input type="radio" name="q${currentQuestion}" value="${index}" id="option${index}">
                                <label for="option${index}">${String.fromCharCode(65 + index)}. ${option}</label>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
            
            // Update progress
            const progress = ((currentQuestion + 1) / quizData.length) * 100;
            document.getElementById('progressBar').style.width = progress + '%';
            document.getElementById('scoreDisplay').textContent = `C√¢u h·ªèi: ${currentQuestion + 1}/${quizData.length}`;
            
            // Update buttons
            document.getElementById('prevBtn').disabled = currentQuestion === 0;
            document.getElementById('nextBtn').textContent = currentQuestion === quizData.length - 1 ? 'K·∫øt th√∫c' : 'C√¢u ti·∫øp';
            
            // Restore previous answer if exists
            if (userAnswers[currentQuestion] !== undefined) {
                const radio = document.querySelector(`input[value="${userAnswers[currentQuestion]}"]`);
                if (radio) {
                    radio.checked = true;
                    radio.closest('.option').classList.add('selected');
                }
            }
        }

        function selectOption(optionIndex) {
            // Clear previous selections
            document.querySelectorAll('.option').forEach(opt => {
                opt.classList.remove('selected');
            });
            
            // Select new option
            const selectedOption = document.querySelector(`input[value="${optionIndex}"]`);
            selectedOption.checked = true;
            selectedOption.closest('.option').classList.add('selected');
            
            userAnswers[currentQuestion] = optionIndex;
        }

        function nextQuestion() {
            if (currentQuestion < quizData.length - 1) {
                currentQuestion++;
                displayQuestion();
            } else {
                finishQuiz();
            }
        }

        function previousQuestion() {
            if (currentQuestion > 0) {
                currentQuestion--;
                displayQuestion();
            }
        }

        function finishQuiz() {
            let score = 0;
            for (let i = 0; i < quizData.length; i++) {
                if (userAnswers[i] === quizData[i].correct) {
                    score++;
                }
            }
            
            quizCompleted = true;
            document.getElementById('quizQuestions').style.display = 'none';
            document.querySelector('.quiz-controls').style.display = 'none';
            document.getElementById('finalScore').style.display = 'block';
            document.getElementById('finalScoreValue').textContent = score;
            
            // Show detailed results
            let resultsHTML = '<div style="margin-top: 20px; text-align: left;"><h4>Chi ti·∫øt k·∫øt qu·∫£:</h4>';
            for (let i = 0; i < quizData.length; i++) {
                const isCorrect = userAnswers[i] === quizData[i].correct;
                const userAnswer = userAnswers[i] !== undefined ? quizData[i].options[userAnswers[i]] : 'Kh√¥ng tr·∫£ l·ªùi';
                const correctAnswer = quizData[i].options[quizData[i].correct];
                
                resultsHTML += `
                    <p style="margin: 10px 0; padding: 10px; background: ${isCorrect ? '#c6f6d5' : '#fed7d7'}; border-radius: 5px;">
                        <strong>C√¢u ${i + 1}:</strong> ${isCorrect ? '‚úì' : '‚úó'}<br>
                        <small>ƒê√°p √°n c·ªßa b·∫°n: ${userAnswer}</small><br>
                        ${!isCorrect ? `<small>ƒê√°p √°n ƒë√∫ng: ${correctAnswer}</small>` : ''}
                    </p>
                `;
            }
            resultsHTML += '</div>';
            
            document.getElementById('finalScore').innerHTML += resultsHTML;
        }

        function restartQuiz() {
            document.getElementById('finalScore').innerHTML = `
                <h3>K·∫øt qu·∫£ b√†i thi</h3>
                <div class="score" style="font-size: 1.5em; margin: 20px 0;">
                    ƒêi·ªÉm s·ªë: <span id="finalScoreValue"></span>/20
                </div>
                <button class="quiz-btn" onclick="restartQuiz()">L√†m l·∫°i</button>
            `;
            document.getElementById('quizQuestions').style.display = 'block';
            document.querySelector('.quiz-controls').style.display = 'flex';
            initializeQuiz();
        }

        // Initialize the lesson
        document.addEventListener('DOMContentLoaded', function() {
            // Any initialization code here
        });
        function openTab(evt, tabName) {
            var i, tabcontent, tabbuttons;
            tabcontent = document.getElementsByClassName("tab-content");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].classList.remove("active");
            }
            tabbuttons = document.getElementsByClassName("tab-button");
            for (i = 0; i < tabbuttons.length; i++) {
                tabbuttons[i].classList.remove("active");
            }
            document.getElementById(tabName).classList.add("active");
            evt.currentTarget.classList.add("active");
        }

        function calculateChiSquare() {
            const observedInput = document.getElementById('observed').value;
            const expectedInput = document.getElementById('expected').value;
            
            if (!observedInput) {
                document.getElementById('chiResult').innerHTML = '<span style="color: red;">Vui l√≤ng nh·∫≠p t·∫ßn su·∫•t quan s√°t!</span>';
                return;
            }
            
            const observed = observedInput.split(',').map(Number);
            let expected;
            
            if (expectedInput) {
                expected = expectedInput.split(',').map(Number);
            } else {
                const total = observed.reduce((a, b) => a + b, 0);
                const expectedValue = total / observed.length;
                expected = new Array(observed.length).fill(expectedValue);
            }
            
            if (observed.length !== expected.length) {
                document.getElementById('chiResult').innerHTML = '<span style="color: red;">S·ªë l∆∞·ª£ng t·∫ßn su·∫•t quan s√°t v√† k·ª≥ v·ªçng ph·∫£i b·∫±ng nhau!</span>';
                return;
            }
            
            let chiSquare = 0;
            for (let i = 0; i < observed.length; i++) {
                chiSquare += Math.pow(observed[i] - expected[i], 2) / expected[i];
            }
            
            const df = observed.length - 1;
            
            document.getElementById('chiResult').innerHTML = `
                <strong>K·∫øt qu·∫£ t√≠nh to√°n:</strong><br>
                œá¬≤ = ${chiSquare.toFixed(3)}<br>
                B·∫≠c t·ª± do (df) = ${df}<br>
                <em>Tham kh·∫£o b·∫£ng ph√¢n ph·ªëi Chi-square ƒë·ªÉ so s√°nh v·ªõi gi√° tr·ªã t·ªõi h·∫°n</em>
            `;
        }

        function calculateTTest() {
            const testType = document.getElementById('testType').value;
            
            if (testType === 'one') {
                const sampleMean = parseFloat(document.getElementById('sampleMean').value);
                const popMean = parseFloat(document.getElementById('popMean').value);
                const stdDev = parseFloat(document.getElementById('stdDev').value);
                const sampleSize = parseFloat(document.getElementById('sampleSize').value);
                
                if (isNaN(sampleMean) || isNaN(popMean) || isNaN(stdDev) || isNaN(sampleSize)) {
                    document.getElementById('tResult').innerHTML = '<span style="color: red;">Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!</span>';
                    return;
                }
                
                const t = (sampleMean - popMean) / (stdDev / Math.sqrt(sampleSize));
                const df = sampleSize - 1;
                
                document.getElementById('tResult').innerHTML = `
                    <strong>K·∫øt qu·∫£ One sample t-test:</strong><br>
                    t = ${t.toFixed(3)}<br>
                    B·∫≠c t·ª± do (df) = ${df}<br>
                    <em>Tham kh·∫£o b·∫£ng ph√¢n ph·ªëi t ƒë·ªÉ so s√°nh v·ªõi gi√° tr·ªã t·ªõi h·∫°n</em>
                `;
            }
        }

        let currentScenario = null;
        const scenarios = [
            {
                situation: "Nghi√™n c·ª©u ·∫£nh h∆∞·ªüng c·ªßa ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y (Truy·ªÅn th·ªëng vs T∆∞∆°ng t√°c) ƒë·∫øn ƒëi·ªÉm thi to√°n c·ªßa h·ªçc sinh",
                variables: "Bi·∫øn ƒë·ªôc l·∫≠p: Ph∆∞∆°ng ph√°p (Ph√¢n lo·∫°i), Bi·∫øn ph·ª• thu·ªôc: ƒêi·ªÉm thi (ƒê·ªãnh l∆∞·ª£ng)",
                correctAnswer: "Independent samples t-test",
                explanation: "2 nh√≥m ƒë·ªôc l·∫≠p (Truy·ªÅn th·ªëng vs T∆∞∆°ng t√°c) so s√°nh ƒëi·ªÉm s·ªë (ƒë·ªãnh l∆∞·ª£ng)"
            },
            {
                situation: "Ki·ªÉm tra xem t·ª∑ l·ªá c√°c lo·∫°i r·ªëi lo·∫°n t√¢m l√Ω (Lo √¢u, Tr·∫ßm c·∫£m, Stress, B√¨nh th∆∞·ªùng) trong d√¢n s·ªë c√≥ b·∫±ng nhau kh√¥ng",
                variables: "Bi·∫øn: Lo·∫°i r·ªëi lo·∫°n (Ph√¢n lo·∫°i), M·ª•c ti√™u: Ki·ªÉm tra ph√¢n ph·ªëi t·∫ßn su·∫•t",
                correctAnswer: "Chi-square goodness of fit",
                explanation: "1 bi·∫øn ph√¢n lo·∫°i, ki·ªÉm tra ph√¢n ph·ªëi t·∫ßn su·∫•t v·ªõi k·ª≥ v·ªçng b·∫±ng nhau"
            },
            {
                situation: "ƒêo m·ª©c ƒë·ªô t·ª± tin c·ªßa 40 sinh vi√™n tr∆∞·ªõc v√† sau khi tham gia kh√≥a training k·ªπ nƒÉng giao ti·∫øp",
                variables: "Bi·∫øn ƒë·ªôc l·∫≠p: Th·ªùi ƒëi·ªÉm (Tr∆∞·ªõc/Sau), Bi·∫øn ph·ª• thu·ªôc: M·ª©c ƒë·ªô t·ª± tin (ƒê·ªãnh l∆∞·ª£ng)",
                correctAnswer: "Paired samples t-test",
                explanation: "C√πng nh√≥m ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ƒëo 2 l·∫ßn, so s√°nh ƒëi·ªÉm trung b√¨nh before-after"
            },
            {
                situation: "Nghi√™n c·ª©u m·ªëi quan h·ªá gi·ªØa gi·ªõi t√≠nh (Nam/N·ªØ) v√† lo·∫°i stress ch√≠nh (H·ªçc t·∫≠p/Gia ƒë√¨nh/T√†i ch√≠nh)",
                variables: "Bi·∫øn 1: Gi·ªõi t√≠nh (Ph√¢n lo·∫°i), Bi·∫øn 2: Lo·∫°i stress (Ph√¢n lo·∫°i)",
                correctAnswer: "Chi-square test of independence", 
                explanation: "2 bi·∫øn ph√¢n lo·∫°i, ki·ªÉm tra m·ªëi quan h·ªá/ƒë·ªôc l·∫≠p gi·ªØa ch√∫ng"
            },
            {
                situation: "So s√°nh ƒëi·ªÉm EQ (tr√≠ tu·ªá c·∫£m x√∫c) trung b√¨nh c·ªßa h·ªçc sinh Vi·ªát Nam v·ªõi chu·∫©n qu·ªëc t·∫ø (85 ƒëi·ªÉm)",
                variables: "Bi·∫øn: ƒêi·ªÉm EQ h·ªçc sinh (ƒê·ªãnh l∆∞·ª£ng), Gi√° tr·ªã so s√°nh: 85 ƒëi·ªÉm (H·∫±ng s·ªë)",
                correctAnswer: "One sample t-test",
                explanation: "1 m·∫´u so s√°nh v·ªõi gi√° tr·ªã chu·∫©n, d·ªØ li·ªáu ƒë·ªãnh l∆∞·ª£ng"
            },
            {
                situation: "So s√°nh m·ª©c ƒë·ªô burnout (ki·ªát s·ª©c) gi·ªØa 3 nh√≥m: Y t√° ICU, Y t√° ngo·∫°i tr√∫, Y t√° nhi khoa",
                variables: "Bi·∫øn ƒë·ªôc l·∫≠p: Khoa l√†m vi·ªác (3 nh√≥m), Bi·∫øn ph·ª• thu·ªôc: M·ª©c ƒë·ªô burnout (ƒê·ªãnh l∆∞·ª£ng)",
                correctAnswer: "ANOVA (kh√¥ng ph·∫£i t-test)",
                explanation: "3 nh√≥m tr·ªü l√™n c·∫ßn d√πng ANOVA, kh√¥ng d√πng t-test"
            },
            {
                situation: "Nghi√™n c·ª©u hi·ªáu qu·∫£ c·ªßa thu·ªëc antidepressant: So s√°nh ƒëi·ªÉm tr·∫ßm c·∫£m c·ªßa 60 b·ªánh nh√¢n tr∆∞·ªõc v√† sau 8 tu·∫ßn ƒëi·ªÅu tr·ªã",
                variables: "Bi·∫øn ƒë·ªôc l·∫≠p: Th·ªùi ƒëi·ªÉm (Tr∆∞·ªõc/Sau ƒëi·ªÅu tr·ªã), Bi·∫øn ph·ª• thu·ªôc: ƒêi·ªÉm tr·∫ßm c·∫£m (ƒê·ªãnh l∆∞·ª£ng)",
                correctAnswer: "Paired samples t-test",
                explanation: "C√πng nh√≥m b·ªánh nh√¢n ƒëo 2 l·∫ßn, thi·∫øt k·∫ø within-subjects"
            },
            {
                situation: "Ki·ªÉm tra m·ªëi quan h·ªá gi·ªØa t√¨nh tr·∫°ng h√∫t thu·ªëc (C√≥/Kh√¥ng) v√† m·ª©c ƒë·ªô lo √¢u (Th·∫•p/Trung b√¨nh/Cao)",
                variables: "Bi·∫øn 1: H√∫t thu·ªëc (Ph√¢n lo·∫°i), Bi·∫øn 2: M·ª©c ƒë·ªô lo √¢u (Ph√¢n lo·∫°i th·ª© b·∫≠c)",
                correctAnswer: "Chi-square test of independence",
                explanation: "2 bi·∫øn ph√¢n lo·∫°i (c√≥ th·ªÉ coi ordinal nh∆∞ categorical), ki·ªÉm tra m·ªëi quan h·ªá"
            },
            {
                situation: "So s√°nh ƒëi·ªÉm IQ trung b√¨nh gi·ªØa tr·∫ª ƒë∆∞·ª£c nu√¥i d∆∞·ª°ng b·ªüi √¥ng b√† v√† tr·∫ª ƒë∆∞·ª£c nu√¥i b·ªüi b·ªë m·∫π",
                variables: "Bi·∫øn ƒë·ªôc l·∫≠p: Ng∆∞·ªùi nu√¥i d∆∞·ª°ng (Ph√¢n lo·∫°i), Bi·∫øn ph·ª• thu·ªôc: ƒêi·ªÉm IQ (ƒê·ªãnh l∆∞·ª£ng)",
                correctAnswer: "Independent samples t-test",
                explanation: "2 nh√≥m ƒë·ªôc l·∫≠p so s√°nh trung b√¨nh c·ªßa bi·∫øn ƒë·ªãnh l∆∞·ª£ng"
            },
            {
                situation: "Nghi√™n c·ª©u ph√¢n b·ªë t·ª∑ l·ªá c√°c style h·ªçc t·∫≠p (Visual/Auditory/Kinesthetic/Reading) ·ªü sinh vi√™n t√¢m l√Ω",
                variables: "Bi·∫øn: Style h·ªçc t·∫≠p (Ph√¢n lo·∫°i), M·ª•c ti√™u: M√¥ t·∫£ ph√¢n ph·ªëi",
                correctAnswer: "Chi-square goodness of fit",
                explanation: "1 bi·∫øn ph√¢n lo·∫°i, ki·ªÉm tra ph√¢n ph·ªëi c√≥ kh√°c v·ªõi k·ª≥ v·ªçng kh√¥ng"
            },
            {
                situation: "ƒê√°nh gi√° hi·ªáu qu·∫£ li·ªáu ph√°p CBT: ƒêo anxiety score c·ªßa 30 b·ªánh nh√¢n tr∆∞·ªõc ƒëi·ªÅu tr·ªã, sau 4 tu·∫ßn v√† sau 8 tu·∫ßn",
                variables: "Bi·∫øn ƒë·ªôc l·∫≠p: Th·ªùi ƒëi·ªÉm (3 l·∫ßn ƒëo), Bi·∫øn ph·ª• thu·ªôc: Anxiety score (ƒê·ªãnh l∆∞·ª£ng)",
                correctAnswer: "ANOVA (Repeated measures)",
                explanation: "3 l·∫ßn ƒëo tr·ªü l√™n c·∫ßn d√πng Repeated measures ANOVA"
            },
            {
                situation: "So s√°nh hi·ªáu qu·∫£ c·ªßa 2 lo·∫°i therapy: Group therapy vs Individual therapy trong ƒëi·ªÅu tr·ªã tr·∫ßm c·∫£m",
                variables: "Bi·∫øn ƒë·ªôc l·∫≠p: Lo·∫°i therapy (Ph√¢n lo·∫°i), Bi·∫øn ph·ª• thu·ªôc: ƒêi·ªÉm tr·∫ßm c·∫£m (ƒê·ªãnh l∆∞·ª£ng)",
                correctAnswer: "Independent samples t-test",
                explanation: "2 nh√≥m ƒë·ªôc l·∫≠p ƒë∆∞·ª£c can thi·ªáp kh√°c nhau, so s√°nh outcome"
            },
            {
                situation: "Nghi√™n c·ª©u m·ªëi quan h·ªá gi·ªØa t√¨nh tr·∫°ng h√¥n nh√¢n (ƒê·ªôc th√¢n/H·∫πn h√≤/K·∫øt h√¥n) v√† m·ª©c ƒë·ªô h·∫°nh ph√∫c (Kh√¥ng h·∫°nh ph√∫c/H·∫°nh ph√∫c)",
                variables: "Bi·∫øn 1: T√¨nh tr·∫°ng h√¥n nh√¢n (Ph√¢n lo·∫°i), Bi·∫øn 2: M·ª©c ƒë·ªô h·∫°nh ph√∫c (Ph√¢n lo·∫°i)",
                correctAnswer: "Chi-square test of independence",
                explanation: "2 bi·∫øn ph√¢n lo·∫°i, ki·ªÉm tra c√≥ m·ªëi quan h·ªá kh√¥ng"
            },
            {
                situation: "Ki·ªÉm tra xem ƒëi·ªÉm stress trung b√¨nh c·ªßa sinh vi√™n y khoa c√≥ kh√°c v·ªõi m·ª©c stress trung b√¨nh d√¢n s·ªë (50 ƒëi·ªÉm) kh√¥ng",
                variables: "Bi·∫øn: ƒêi·ªÉm stress sinh vi√™n Y (ƒê·ªãnh l∆∞·ª£ng), Gi√° tr·ªã so s√°nh: 50 ƒëi·ªÉm (Chu·∫©n d√¢n s·ªë)",
                correctAnswer: "One sample t-test",
                explanation: "So s√°nh trung b√¨nh 1 m·∫´u v·ªõi gi√° tr·ªã tham chi·∫øu c·ªßa d√¢n s·ªë"
            },
            {
                situation: "Nghi√™n c·ª©u hi·ªáu qu·∫£ c·ªßa mindfulness meditation: ƒêo cortisol level tr∆∞·ªõc v√† sau 6 tu·∫ßn t·∫≠p luy·ªán ·ªü 50 ng∆∞·ªùi tham gia",
                variables: "Bi·∫øn ƒë·ªôc l·∫≠p: Th·ªùi ƒëi·ªÉm (Tr∆∞·ªõc/Sau), Bi·∫øn ph·ª• thu·ªôc: Cortisol level (ƒê·ªãnh l∆∞·ª£ng)",
                correctAnswer: "Paired samples t-test",
                explanation: "C√πng nh√≥m ng∆∞·ªùi ƒëo 2 l·∫ßn, thi·∫øt k·∫ø before-after"
            },
            {
                situation: "Ki·ªÉm tra t·ª∑ l·ªá c√°c c∆° ch·∫ø defense (Denial/Projection/Sublimation/Rationalization) c√≥ xu·∫•t hi·ªán ƒë·ªÅu nhau kh√¥ng",
                variables: "Bi·∫øn: Lo·∫°i defense mechanism (Ph√¢n lo·∫°i), M·ª•c ti√™u: Ki·ªÉm tra ph√¢n ph·ªëi ƒë·ªìng ƒë·ªÅu",
                correctAnswer: "Chi-square goodness of fit",
                explanation: "1 bi·∫øn ph√¢n lo·∫°i v·ªõi nhi·ªÅu categories, test ph√¢n ph·ªëi ƒë·ªìng ƒë·ªÅu"
            },
            {
                situation: "So s√°nh ƒëi·ªÉm empathy gi·ªØa sinh vi√™n ng√†nh t√¢m l√Ω l√¢m s√†ng v√† sinh vi√™n ng√†nh t√¢m l√Ω t·ªï ch·ª©c",
                variables: "Bi·∫øn ƒë·ªôc l·∫≠p: Chuy√™n ng√†nh (Ph√¢n lo·∫°i), Bi·∫øn ph·ª• thu·ªôc: ƒêi·ªÉm empathy (ƒê·ªãnh l∆∞·ª£ng)",
                correctAnswer: "Independent samples t-test",
                explanation: "2 nh√≥m sinh vi√™n ƒë·ªôc l·∫≠p, so s√°nh ƒëi·ªÉm s·ªë trung b√¨nh"
            },
            {
                situation: "Nghi√™n c·ª©u m·ªëi quan h·ªá gi·ªØa personality type (Introvert/Extrovert) v√† preferred therapy style (CBT/Psychodynamic/Humanistic)",
                variables: "Bi·∫øn 1: Personality type (Ph√¢n lo·∫°i), Bi·∫øn 2: Therapy preference (Ph√¢n lo·∫°i)",
                correctAnswer: "Chi-square test of independence",
                explanation: "2 bi·∫øn ph√¢n lo·∫°i, ki·ªÉm tra c√≥ association kh√¥ng"
            },
            {
                situation: "ƒê√°nh gi√° t√°c ƒë·ªông c·ªßa sleep deprivation: ƒêo reaction time c·ªßa 25 ng∆∞·ªùi sau 0h, 24h, v√† 48h kh√¥ng ng·ªß",
                variables: "Bi·∫øn ƒë·ªôc l·∫≠p: Th·ªùi gian kh√¥ng ng·ªß (3 levels), Bi·∫øn ph·ª• thu·ªôc: Reaction time (ƒê·ªãnh l∆∞·ª£ng)",
                correctAnswer: "ANOVA (Repeated measures)",
                explanation: "3 l·∫ßn ƒëo tr·ªü l√™n tr√™n c√πng ƒë·ªëi t∆∞·ª£ng c·∫ßn Repeated measures ANOVA"
            },
            {
                situation: "Ki·ªÉm tra ph√¢n ph·ªëi c√°c lo·∫°i phobia ph·ªï bi·∫øn (Arachnophobia/Claustrophobia/Agoraphobia/Social phobia) c√≥ theo t·ª∑ l·ªá 2:1:1:3 kh√¥ng",
                variables: "Bi·∫øn: Lo·∫°i phobia (Ph√¢n lo·∫°i), T·ª∑ l·ªá k·ª≥ v·ªçng: 2:1:1:3",
                correctAnswer: "Chi-square goodness of fit",
                explanation: "1 bi·∫øn ph√¢n lo·∫°i, test ph√¢n ph·ªëi theo t·ª∑ l·ªá k·ª≥ v·ªçng c·ª• th·ªÉ"
            }
        ];

        function generateScenario() {
            currentScenario = scenarios[Math.floor(Math.random() * scenarios.length)];
            
            document.getElementById('practiceScenarios').innerHTML = `
                <div style="background: white; padding: 20px; border-radius: 15px; border: 2px solid #F6A5B7; margin: 15px 0;">
                    <h4 style="color: #2C3E50; margin-bottom: 15px;">üìã T√¨nh hu·ªëng:</h4>
                    <p style="font-size: 1.1em; margin-bottom: 15px;">${currentScenario.situation}</p>
                    <p style="color: #666; font-style: italic;">${currentScenario.variables}</p>
                    
                    <div style="margin-top: 20px;">
                        <strong>Ch·ªçn test ph√π h·ª£p:</strong><br>
                        <label style="display: block; margin: 8px 0;"><input type="radio" name="scenarioAnswer" value="chi-goodness"> Chi-square goodness of fit</label>
                        <label style="display: block; margin: 8px 0;"><input type="radio" name="scenarioAnswer" value="chi-independence"> Chi-square test of independence</label>
                        <label style="display: block; margin: 8px 0;"><input type="radio" name="scenarioAnswer" value="one-sample"> One sample t-test</label>
                        <label style="display: block; margin: 8px 0;"><input type="radio" name="scenarioAnswer" value="independent"> Independent samples t-test</label>
                        <label style="display: block; margin: 8px 0;"><input type="radio" name="scenarioAnswer" value="paired"> Paired samples t-test</label>
                        <label style="display: block; margin: 8px 0;"><input type="radio" name="scenarioAnswer" value="anova"> ANOVA</label>
                        <label style="display: block; margin: 8px 0;"><input type="radio" name="scenarioAnswer" value="anova-rm"> ANOVA (Repeated measures)</label>
                    </div>
                </div>
            `;
            
            document.getElementById('practiceResult').innerHTML = 'H√£y ch·ªçn test ph√π h·ª£p v√† nh·∫•n "Hi·ªán ƒë√°p √°n" ƒë·ªÉ ki·ªÉm tra...';
        }

        function showAnswer() {
            if (!currentScenario) {
                document.getElementById('practiceResult').innerHTML = '<span style="color: #F6A5B7;">Vui l√≤ng t·∫°o t√¨nh hu·ªëng tr∆∞·ªõc!</span>';
                return;
            }
            
            const selected = document.querySelector('input[name="scenarioAnswer"]:checked');
            const userAnswer = selected ? selected.nextSibling.textContent.trim() : '';
            
            const isCorrect = userAnswer === currentScenario.correctAnswer;
            
            document.getElementById('practiceResult').innerHTML = `
                <div style="padding: 15px;">
                    <strong>${isCorrect ? '‚úÖ Ch√≠nh x√°c!' : '‚ùå Ch∆∞a ƒë√∫ng'}</strong><br><br>
                    ${selected ? `<strong>B·∫°n ch·ªçn:</strong> ${userAnswer}<br>` : '<strong>B·∫°n ch∆∞a ch·ªçn ƒë√°p √°n</strong><br>'}
                    <strong>ƒê√°p √°n ƒë√∫ng:</strong> ${currentScenario.correctAnswer}<br><br>
                    <strong>Gi·∫£i th√≠ch:</strong> ${currentScenario.explanation}
                </div>
            `;
        }

        function checkSituation() {
            const selected = document.getElementById('situationTest').value;
            const resultDiv = document.getElementById('situationResult');
            
            if (!selected) {
                resultDiv.innerHTML = '<span style="color: #F6A5B7;">Vui l√≤ng ch·ªçn m·ªôt test!</span>';
                return;
            }
            
            if (selected === 'chi') {
                resultDiv.innerHTML = `
                    <strong style="color: #48bb78;">‚úÖ Ch√≠nh x√°c!</strong><br>
                    <strong>Gi·∫£i th√≠ch:</strong> C·∫£ hai bi·∫øn ƒë·ªÅu l√† ph√¢n lo·∫°i (c√≥/kh√¥ng), v√¨ v·∫≠y s·ª≠ d·ª•ng Chi-square test of independence ƒë·ªÉ ki·ªÉm tra m·ªëi quan h·ªá gi·ªØa ch√∫ng.<br>
                    <em>Bi·∫øn 1: H√∫t thu·ªëc (c√≥/kh√¥ng) - Ph√¢n lo·∫°i</em><br>
                    <em>Bi·∫øn 2: Ung th∆∞ ph·ªïi (c√≥/kh√¥ng) - Ph√¢n lo·∫°i</em>
                `;
            } else {
                let testName = '';
                switch(selected) {
                    case 't1': testName = 'One sample t-test'; break;
                    case 't2': testName = 'Independent t-test'; break;
                    case 't3': testName = 'Paired t-test'; break;
                }
                resultDiv.innerHTML = `
                    <strong style="color: #e53e3e;">‚ùå Kh√¥ng ƒë√∫ng</strong><br>
                    <strong>B·∫°n ch·ªçn:</strong> ${testName}<br>
                    <strong>ƒê√°p √°n ƒë√∫ng:</strong> Chi-square test of independence<br>
                    <strong>L√Ω do:</strong> t-test d√†nh cho bi·∫øn ƒë·ªãnh l∆∞·ª£ng, nh∆∞ng ·ªü ƒë√¢y c·∫£ hai bi·∫øn ƒë·ªÅu l√† ph√¢n lo·∫°i (c√≥/kh√¥ng).
                `;
            }
        }

        function checkAnswers() {
            const answers = {
                q1: 'b',   // Chi-square d√†nh cho bi·∫øn ph√¢n lo·∫°i
                q2: 'c',   // Paired t-test cho before-after
                q3: 'b',   // E l√† t·∫ßn su·∫•t k·ª≥ v·ªçng
                q4: 'b',   // Gi·ªõi t√≠nh (ph√¢n lo·∫°i) vs m·ª©c ƒë·ªô lo √¢u (ƒë·ªãnh l∆∞·ª£ng) ‚Üí Independent t-test
                q5: 'b',   // Hai bi·∫øn ph√¢n lo·∫°i ‚Üí Chi-square independence
                q6: 'b',   // Chi-square kh√¥ng c·∫ßn ph√¢n ph·ªëi chu·∫©n
                q7: 'c',   // So s√°nh v·ªõi gi√° tr·ªã chu·∫©n ‚Üí One sample t-test
                q8: 'b',   // Before-after c√πng nh√≥m ‚Üí Paired t-test
                q9: 'b',   // df = n-1 = 6-1 = 5
                q10: 'c',  // Ki·ªÉm tra ph√¢n ph·ªëi c·ªßa 1 bi·∫øn ph√¢n lo·∫°i ‚Üí goodness of fit
                q11: 'b',  // So s√°nh 2 nh√≥m ƒë·ªôc l·∫≠p ‚Üí Independent t-test
                q12: 'b',  // C√¥ng th·ª©c one sample t-test
                q13: 'c',  // Hai bi·∫øn ph√¢n lo·∫°i ‚Üí Chi-square independence
                q14: 'd',  // T·∫•t c·∫£ c√°c tr∆∞·ªùng h·ª£p vi ph·∫°m gi·∫£ ƒë·ªãnh
                q15: 'b'   // C√πng nh√≥m ƒëo 2 l·∫ßn ‚Üí Paired t-test
            };
            
            let score = 0;
            let total = Object.keys(answers).length;
            let feedback = '<strong>üìä K·∫æT QU·∫¢ KI·ªÇM TRA:</strong><br><br>';
            
            const explanations = {
                q1: 'Chi-square test d√†nh cho d·ªØ li·ªáu ph√¢n lo·∫°i (categorical variables)',
                q2: 'Paired samples t-test d√†nh cho thi·∫øt k·∫ø before-after (c√πng nh√≥m ƒë·ªëi t∆∞·ª£ng)',
                q3: 'E trong c√¥ng th·ª©c œá¬≤=Œ£[(O-E)¬≤/E] l√† Expected frequency (t·∫ßn su·∫•t k·ª≥ v·ªçng)',
                q4: 'Gi·ªõi t√≠nh (ph√¢n lo·∫°i) ‚Üí bi·∫øn ƒë·ªôc l·∫≠p, m·ª©c ƒë·ªô lo √¢u (ƒë·ªãnh l∆∞·ª£ng) ‚Üí bi·∫øn ph·ª• thu·ªôc. D√πng Independent t-test',
                q5: 'C·∫£ hai bi·∫øn ƒë·ªÅu ph√¢n lo·∫°i (c√≥/kh√¥ng) ‚Üí Chi-square test of independence',
                q6: 'Chi-square kh√¥ng y√™u c·∫ßu ph√¢n ph·ªëi chu·∫©n. ƒê√¢y l√† test phi tham s·ªë',
                q7: 'So s√°nh trung b√¨nh m·∫´u v·ªõi gi√° tr·ªã chu·∫©n d√¢n s·ªë ‚Üí One sample t-test',
                q8: 'C√πng 30 b·ªánh nh√¢n ƒëo tr∆∞·ªõc v√† sau ‚Üí Paired samples t-test',
                q9: 'B·∫≠c t·ª± do df = s·ªë nh√≥m - 1 = 6 - 1 = 5',
                q10: 'Ki·ªÉm tra ph√¢n ph·ªëi t·∫ßn su·∫•t c·ªßa 1 bi·∫øn ph√¢n lo·∫°i ‚Üí Chi-square goodness of fit',
                q11: 'So s√°nh ƒëi·ªÉm stress gi·ªØa 2 nh√≥m sinh vi√™n ƒë·ªôc l·∫≠p ‚Üí Independent t-test',
                q12: 'One sample t-test: t = (xÃÑ - Œº) / (s/‚àön)',
                q13: 'C·∫£ hai bi·∫øn ƒë·ªÅu ph√¢n lo·∫°i (c√≥/kh√¥ng) ‚Üí Chi-square test of independence',
                q14: 'Khi vi ph·∫°m b·∫•t k·ª≥ gi·∫£ ƒë·ªãnh n√†o c·ªßa t-test th√¨ chuy·ªÉn sang test phi tham s·ªë',
                q15: 'C√πng 40 sinh vi√™n ƒëo 2 l·∫ßn ‚Üí Paired samples t-test'
            };
            
            for (let question in answers) {
                const selected = document.querySelector(`input[name="${question}"]:checked`);
                if (selected && selected.value === answers[question]) {
                    score++;
                    feedback += `‚úÖ <strong>${question.toUpperCase()}:</strong> ƒê√∫ng<br>`;
                } else {
                    feedback += `‚ùå <strong>${question.toUpperCase()}:</strong> Sai<br>`;
                    feedback += `&nbsp;&nbsp;&nbsp;<em>‚Üí ${explanations[question]}</em><br>`;
                }
                feedback += '<br>';
            }
            
            const percentage = Math.round(score/total*100);
            feedback += `<div style="background: #F8F0FF; padding: 15px; border-radius: 10px; margin: 20px 0; border: 2px solid #F6A5B7;">`;
            feedback += `<strong>üéØ ƒêI·ªÇM S·ªê: ${score}/${total} (${percentage}%)</strong><br><br>`;
            
            if (score >= 13) {
                feedback += 'ü•á <strong style="color: #FFD700;">XU·∫§T S·∫ÆC!</strong> B·∫°n ƒë√£ th√†nh th·∫°o Chi-square & t-test!<br>';
                feedback += 'üí° B·∫°n c√≥ th·ªÉ t·ª± tin √°p d·ª•ng v√†o nghi√™n c·ª©u th·ª±c t·∫ø.';
            } else if (score >= 10) {
                feedback += 'ü•à <strong style="color: #C0C0C0;">T·ªêT!</strong> Ki·∫øn th·ª©c kh√° v·ªØng v√†ng.<br>';
                feedback += 'üìö H√£y √¥n l·∫°i nh·ªØng ph·∫ßn c√≤n thi·∫øu ƒë·ªÉ ƒë·∫°t ƒëi·ªÉm t·ªëi ƒëa.';
            } else if (score >= 7) {
                feedback += 'ü•â <strong style="color: #CD7F32;">KH√Å!</strong> C·∫ßn c·ªßng c·ªë th√™m.<br>';
                feedback += 'üìñ ƒê·ªçc l·∫°i l√Ω thuy·∫øt v√† th·ª±c h√†nh th√™m c√°c v√≠ d·ª•.';
            } else {
                feedback += 'üìö <strong style="color: #e53e3e;">C·∫¶N C·ªê G·∫ÆNG TH√äM!</strong><br>';
                feedback += 'üîÑ H√£y h·ªçc l·∫°i t·ª´ ƒë·∫ßu v√† th·ª±c h√†nh nhi·ªÅu h∆°n.';
            }
            
            feedback += '</div>';
            
            // Th√™m g·ª£i √Ω h·ªçc t·∫≠p
            feedback += `<div style="background: white; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 5px solid #F6A5B7;">`;
            feedback += `<strong>üìã G·ª¢I √ù H·ªåC T·∫¨P:</strong><br>`;
            if (score < 13) {
                feedback += `‚Ä¢ √în l·∫°i tab "T·ªïng quan" ƒë·ªÉ hi·ªÉu quy t·∫Øc ch·ªçn test<br>`;
                feedback += `‚Ä¢ Th·ª±c h√†nh th√™m ·ªü tab "Th·ª±c h√†nh" v·ªõi c√°c t√¨nh hu·ªëng m·ªõi<br>`;
                feedback += `‚Ä¢ Xem l·∫°i c√°c v√≠ d·ª• c·ª• th·ªÉ trong tab "Chi-square" v√† "t-test"`;
            } else {
                feedback += `‚Ä¢ Th·ª≠ th√°ch b·∫£n th√¢n v·ªõi c√°c nghi√™n c·ª©u ph·ª©c t·∫°p h∆°n<br>`;
                feedback += `‚Ä¢ H·ªçc th√™m v·ªÅ ANOVA v√† c√°c test kh√°c<br>`;
                feedback += `‚Ä¢ √Åp d·ª•ng v√†o d·ª± √°n nghi√™n c·ª©u th·ª±c t·∫ø`;
            }
            feedback += '</div>';
            
            document.getElementById('quizResult').innerHTML = feedback;
        }

        // Hi·ªáu ·ª©ng loading khi chuy·ªÉn tab
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Trang h·ªçc t·∫≠p Chi-square & t-test ƒë√£ s·∫µn s√†ng!');
        });

