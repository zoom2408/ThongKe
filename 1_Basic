<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <title>T√¢m l√Ω h·ªçc Nh·∫≠n th·ª©c: Th·ªëng k√™ trong T√¢m l√Ω h·ªçc</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #222;
            background: linear-gradient(135deg, #6dd5ed 0%, #2193b0 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 1150px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 1px 2px 8px rgba(0,0,0,0.22);
        }
        .header p {
            font-size: 1.12em;
            opacity: 0.93;
        }
        .tabs {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 10px;
        }
        .tab {
            padding: 11px 22px;
            background: rgba(255,255,255,0.25);
            border: none;
            border-radius: 22px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(6px);
        }
        .tab:hover, .tab.active {
            background: rgba(255,255,255,0.35);
            box-shadow: 0 3px 10px rgba(0,0,0,0.13);
        }
        .content {
            background: rgba(255,255,255,0.98);
            border-radius: 18px;
            padding: 28px;
            box-shadow: 0 12px 30px rgba(0,0,0,0.09);
        }
        .tab-content { display: none; }
        .tab-content.active { display: block; animation: fadeIn 0.4s; }
        @keyframes fadeIn { from {opacity: 0; transform: translateY(15px);} to {opacity: 1; transform: translateY(0);} }
        .highlight { background: linear-gradient(120deg, #fff6b7 0%, #f6416c11 100%); padding: 17px; border-radius: 8px; margin: 13px 0; border-left: 5px solid #f6416c; }
        .concept-card {
            background: linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%);
            border-radius: 12px;
            padding: 18px;
            margin: 15px 0;
            box-shadow: 0 6px 20px rgba(0,0,0,0.09);
        }
        .experiment-card {
            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            border-radius: 12px;
            padding: 20px;
            margin: 15px 0;
            box-shadow: 0 4px 15px rgba(0,0,0,0.07);
        }
        .experiment-title { font-size: 1.22em; font-weight: bold; margin-bottom: 8px; }
        .experiment-meta { font-size: 0.99em; color: #295; margin-bottom: 8px;}
        .example-title { font-weight: bold; margin-bottom: 8px; color: #007b83;}
        .practical-example {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            border-radius: 10px;
            padding: 14px;
            margin: 10px 0;
            font-size: 0.98em;
        }
        .model-diagram {
            background: linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%);
            border-radius: 14px;
            padding: 17px;
            margin: 18px 0;
            text-align: center;
        }
        .flow-step {
            display: inline-block;
            background: white;
            padding: 12px 18px;
            margin: 7px;
            border-radius: 8px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.08);
            position: relative;
        }
        .flow-step::after {
            content: "‚Üí";
            position: absolute;
            right: -18px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 1.3em;
            color: #999;
        }
        .flow-step:last-child::after { display: none; }
        .quiz-container { margin-top: 24px; }
        .question {
            background: #fff;
            border-radius: 8px;
            padding: 14px;
            margin: 10px 0;
            box-shadow: 0 3px 8px rgba(0,0,0,0.04);
            border-left: 4px solid #28a745;
        }
        .question h4 { color: #0d223a; margin-bottom: 12px; }
        .options { list-style: none; padding: 0; }
        .options li {
            padding: 9px;
            margin: 4px 0;
            background: #f8f9fa;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.24s;
        }
        .options li:hover { background: #e9ecef; }
        .demo-button {
            background: linear-gradient(45deg, #2193b0, #6dd5ed);
            color: white; border: none; padding: 11px 21px;
            border-radius: 22px; cursor: pointer; font-size: 1em;
            transition: all 0.24s;
        }
        .demo-button:hover {
            transform: scale(1.04);
            box-shadow: 0 4px 13px rgba(0,0,0,0.13);
        }
        .exp-timeline {
            margin: 12px 0 2px 0;
            border-left: 4px solid #2293b0;
            padding-left: 18px;
        }
        .exp-year { font-weight: bold; color: #2293b0; }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1>üìä Th·ªëng k√™ trong T√¢m l√Ω h·ªçc</h1>
        <p>Kh√°i ni·ªám ‚Äì Ph√¢n lo·∫°i ‚Äì Th√≠ nghi·ªám ‚Äì M√¥ h√¨nh ‚Äì ·ª®ng d·ª•ng & Luy·ªán t·∫≠p tr·∫Øc nghi·ªám</p>
    </div>
    <div class="tabs">
        <button class="tab active" onclick="showTab('definitions')">Kh√°i ni·ªám & Ph√¢n lo·∫°i</button>
        <button class="tab" onclick="showTab('experiments')">Timeline Th√≠ nghi·ªám</button>
        <button class="tab" onclick="showTab('models')">S∆° ƒë·ªì & M√¥ h√¨nh</button>
        <button class="tab" onclick="showTab('applications')">·ª®ng d·ª•ng & Bi·ªÉu ƒë·ªì</button>
        <button class="tab" onclick="showTab('quiz')">Tr·∫Øc nghi·ªám √¥n t·∫≠p</button>
    </div>
    <div class="content">
        <!-- Kh√°i ni·ªám -->
      <div id="definitions" class="tab-content active">
  <h2>üéØ Tr·ª±c quan h√≥a c√°c kh√°i ni·ªám th·ªëng k√™ c∆° b·∫£n</h2>
  <div style="display:flex;gap:18px;flex-wrap:wrap;">
    <div style="flex:2 1 330px;min-width:300px;">
      <div style="display:flex;gap:8px;margin-bottom:10px;">
        <button class="demo-button" id="btnData" style="font-size:0.97em;">Mean/Median/Mode</button>
        <button class="demo-button" id="btnDist" style="font-size:0.97em;">Ph√¢n ph·ªëi (Normal/Skew)</button>
      </div>
      <div id="viz-area">
        <!-- JS renders here -->
      </div>
    </div>
    <div id="concept-explain" style="flex:1 1 250px;min-width:220px;background:#f8fafd;border-radius:13px;padding:17px 15px;box-shadow:0 2px 8px #0001;">
      <div style="color:#2491b4;font-weight:bold;font-size:1.1em;margin-bottom:10px;">Gi·∫£i th√≠ch</div>
      <div id="explain-txt">
        Ch·ªçn kh√°i ni·ªám ho·∫∑c di chu·ªôt v√†o t·ª´ng ch·ªâ s·ªë ƒë·ªÉ xem gi·∫£i th√≠ch tr·ª±c quan. <br><br>
        <b>Mean (Trung b√¨nh):</b> l√† gi√° tr·ªã b√¨nh qu√¢n c·ªßa t·∫•t c·∫£ ƒëi·ªÉm d·ªØ li·ªáu.<br>
        <b>Median (Trung v·ªã):</b> l√† gi√° tr·ªã n·∫±m gi·ªØa khi s·∫Øp x·∫øp d√£y s·ªë.<br>
        <b>Mode (Y·∫øu v·ªã):</b> l√† gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t.<br>
        <b>Normal Distribution:</b> l√† ph√¢n ph·ªëi ƒë·ªëi x·ª©ng quanh trung b√¨nh.<br>
        <b>Positive Skew:</b> ƒëu√¥i ph·∫£i d√†i h∆°n.<br>
        <b>Negative Skew:</b> ƒëu√¥i tr√°i d√†i h∆°n.
      </div>
    </div>
  </div>
</div>
<script>
// --- DATA ---
const dataSets = {
  base: [1, 2, 2, 3, 4, 5],
  normal: [3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 10],
  skewP: [2,2,3,3,3,4,4,5,6,6,7,8,10,13,16],
  skewN: [1,3,6,7,7,8,9,10,10,10,11,11,11,12,13]
};
// --- DRAWING ---
const $viz = document.getElementById('viz-area');
const $exp = document.getElementById('explain-txt');
let view = 'data'; // or 'dist'

function renderDataChart() {
  const data = dataSets.base;
  const mean = +(data.reduce((a,b)=>a+b,0)/data.length).toFixed(2);
  const sorted = [...data].sort((a,b)=>a-b);
  const median = data.length%2===0 ? ((sorted[data.length/2-1]+sorted[data.length/2])/2) : sorted[(data.length-1)/2];
  const mode = data.sort((a,b) =>
    data.filter(v=>v===a).length - data.filter(v=>v===b).length
  ).pop();

  // count frequency for bar chart
  let freq = {};
  data.forEach(v => freq[v]=(freq[v]||0)+1);
  const bars = Object.entries(freq).map(([k,v],i)=>{
    let color = "#5bc0eb";
    if (+k === mean) color="#1e90ff";
    if (+k === median) color="#20b36c";
    if (+k === mode) color="#ffc300";
    return `<g>
      <rect x="${35+55*i}" y="${110-v*24}" width="45" height="${v*24}" fill="${color}" data-type="bar" data-val="${k}" rx="8"
        onmouseover="highlightConcept('bar',${k})" onmouseout="highlightConcept()"/>
      <text x="${58+55*i}" y="130" font-size="15">${k}</text>
      <text x="${58+55*i}" y="${100-v*24}" font-size="13" fill="#888">${v}</text>
    </g>`;
  }).join('');
  // pointers
  let meanX = 0, medianX = 0, modeX = 0;
  const keys = Object.keys(freq);
  for(let i=0;i<keys.length;i++){
    if(+keys[i] === Math.round(mean)) meanX = 58+55*i;
    if(+keys[i] === median) medianX = 58+55*i;
    if(+keys[i] === mode) modeX = 58+55*i;
  }
  $viz.innerHTML = `
    <svg width="370" height="145" style="background:#f7fbff;border-radius:12px;box-shadow:0 1px 6px #0001;">
      <text x="15" y="22" font-size="14" fill="#2491b4">Bi·ªÉu ƒë·ªì t·∫ßn su·∫•t</text>
      ${bars}
      <!-- Mean marker -->
      <g onclick="highlightConcept('mean')" style="cursor:pointer;">
        <circle cx="${meanX||180}" cy="45" r="7" fill="#1e90ff" />
        <text x="${(meanX||180)+11}" y="49" font-size="13" fill="#1e90ff" style="font-weight:bold;">Mean</text>
      </g>
      <!-- Median marker -->
      <g onclick="highlightConcept('median')" style="cursor:pointer;">
        <rect x="${medianX||155-8}" y="65" width="16" height="9" fill="#20b36c"/>
        <text x="${(medianX||155)+19}" y="75" font-size="13" fill="#20b36c" style="font-weight:bold;">Median</text>
      </g>
      <!-- Mode marker -->
      <g onclick="highlightConcept('mode')" style="cursor:pointer;">
        <rect x="${modeX||105-9}" y="28" width="20" height="9" fill="#ffc300"/>
        <text x="${(modeX||105)+24}" y="36" font-size="13" fill="#ffc300" style="font-weight:bold;">Mode</text>
      </g>
    </svg>
    <div style="margin-top:7px;font-size:14px;">
      <b>B·∫•m ho·∫∑c r√™ chu·ªôt v√†o t·ª´ng nh√£n ƒë·ªÉ xem gi·∫£i th√≠ch c·ª• th·ªÉ.</b>
    </div>
  `;
  window.highlightConcept = function(type, val) {
    if(type === 'mean') {
      $exp.innerHTML = `<b>Mean (Trung b√¨nh):</b> T·ªïng t·∫•t c·∫£ c√°c gi√° tr·ªã chia cho s·ªë l∆∞·ª£ng (2+2+3+1+4+5=17; 17/6=2.83).<br>L√† trung t√¢m c√¢n b·∫±ng c·ªßa d·ªØ li·ªáu.`;
    } else if(type === 'median') {
      $exp.innerHTML = `<b>Median (Trung v·ªã):</b> Gi√° tr·ªã gi·ªØa khi s·∫Øp x·∫øp d√£y s·ªë. <br>V·ªõi [1,2,2,3,4,5] th√¨ median = (2+3)/2 = 2.5.<br>D·ªØ li·ªáu l·ªách kh√¥ng ·∫£nh h∆∞·ªüng median nhi·ªÅu.`;
    } else if(type === 'mode') {
      $exp.innerHTML = `<b>Mode (Y·∫øu v·ªã):</b> Gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t, ·ªü ƒë√¢y l√† <b>2</b>.<br>Th∆∞·ªùng d√πng trong d·ªØ li·ªáu ƒë·ªãnh t√≠nh ho·∫∑c s·ªë li·ªáu l·∫∑p nhi·ªÅu.`;
    } else if(type === 'bar' && val !== undefined) {
      $exp.innerHTML = `C·ªôt <b>${val}</b> xu·∫•t hi·ªán <b>${freq[val]}</b> l·∫ßn.<br>Ch√∫ √Ω: mean, median, mode c√≥ th·ªÉ gi·ªëng ho·∫∑c kh√°c nhau!`;
    } else {
      $exp.innerHTML = `Ch·ªçn kh√°i ni·ªám ho·∫∑c di chu·ªôt v√†o t·ª´ng ch·ªâ s·ªë ƒë·ªÉ xem gi·∫£i th√≠ch tr·ª±c quan. <br><br>
        <b>Mean (Trung b√¨nh):</b> l√† gi√° tr·ªã b√¨nh qu√¢n c·ªßa t·∫•t c·∫£ ƒëi·ªÉm d·ªØ li·ªáu.<br>
        <b>Median (Trung v·ªã):</b> l√† gi√° tr·ªã n·∫±m gi·ªØa khi s·∫Øp x·∫øp d√£y s·ªë.<br>
        <b>Mode (Y·∫øu v·ªã):</b> l√† gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t.<br>
        <b>Normal Distribution:</b> l√† ph√¢n ph·ªëi ƒë·ªëi x·ª©ng quanh trung b√¨nh.<br>
        <b>Positive Skew:</b> ƒëu√¥i ph·∫£i d√†i h∆°n.<br>
        <b>Negative Skew:</b> ƒëu√¥i tr√°i d√†i h∆°n.`;
    }
  }
}
function renderDistChart(type='normal') {
  let data, label, exp, color="#2193b0";
  if(type==="normal") { data=dataSets.normal; label="Ph√¢n ph·ªëi chu·∫©n (Normal)"; color="#2193b0"; }
  if(type==="skewP") { data=dataSets.skewP; label="L·ªách d∆∞∆°ng (Positive Skew)"; color="#f7931e"; }
  if(type==="skewN") { data=dataSets.skewN; label="L·ªách √¢m (Negative Skew)"; color="#d72660"; }
  let min = Math.min(...data), max = Math.max(...data);
  let freq = {};
  data.forEach(v=>freq[v]=(freq[v]||0)+1);
  let keys = Object.keys(freq).map(Number).sort((a,b)=>a-b);
  let barSvg = keys.map((k,i) =>
    `<rect x="${35+33*i}" y="${105-freq[k]*12}" width="27" height="${freq[k]*12}" rx="5"
      fill="${color}" data-type="bar" data-val="${k}"
      onmouseover="distExplain(${k},${freq[k]})" onmouseout="distExplain()"/>
      <text x="${47+33*i}" y="122" font-size="12" fill="#888">${k}</text>
      <text x="${47+33*i}" y="${100-freq[k]*12}" font-size="12" fill="#888">${freq[k]}</text>`
  ).join('');
  $viz.innerHTML = `
    <svg width="380" height="135" style="background:#f7fbff;border-radius:12px;box-shadow:0 1px 6px #0001;">
      <text x="15" y="22" font-size="14" fill="${color}">${label}</text>
      <polyline points="${keys.map((k,i)=>`${48+33*i},${105-freq[k]*12}`).join(' ')}" fill="none" stroke="${color}" stroke-width="2.5"/>
      ${barSvg}
    </svg>
    <div style="margin-top:7px;font-size:14px;">
      <b>Ch·ªçn ph√¢n ph·ªëi ƒë·ªÉ xem h√¨nh d·∫°ng v√† ƒë·∫∑c tr∆∞ng!</b>
      <br>
      <span style="color:#2193b0;cursor:pointer;" onclick="drawDist('normal')">Ph√¢n ph·ªëi chu·∫©n</span> |
      <span style="color:#f7931e;cursor:pointer;" onclick="drawDist('skewP')">L·ªách d∆∞∆°ng</span> |
      <span style="color:#d72660;cursor:pointer;" onclick="drawDist('skewN')">L·ªách √¢m</span>
    </div>
  `;
  window.distExplain = function(val, count) {
    if(val!==undefined) {
      $exp.innerHTML = `Gi√° tr·ªã <b>${val}</b> xu·∫•t hi·ªán <b>${count}</b> l·∫ßn.<br>Ch√∫ √Ω ƒë·∫øn h√¨nh d·∫°ng t·ªïng th·ªÉ: ph√¢n ph·ªëi chu·∫©n c√¢n ƒë·ªëi, l·ªách d∆∞∆°ng ƒëu√¥i ph·∫£i d√†i, l·ªách √¢m ƒëu√¥i tr√°i d√†i.`;
    } else {
      if(type==="normal")
        $exp.innerHTML = `<b>Ph√¢n ph·ªëi chu·∫©n:</b> ƒê·ªânh ·ªü trung b√¨nh, c√¢n ƒë·ªëi 2 b√™n.<br>
        <img src="https://upload.wikimedia.org/wikipedia/commons/7/74/Normal_Distribution_PDF.png" style="max-width:140px;vertical-align:middle;"><br>
        Mean = Median = Mode.<br>·ª®ng d·ª•ng: Chi·ªÅu cao, IQ, ƒëi·ªÉm s·ªë l·ªõn.`;
      if(type==="skewP")
        $exp.innerHTML = `<b>L·ªách d∆∞∆°ng (Positive Skew):</b> ƒêu√¥i ph·∫£i d√†i h∆°n.<br>
        <img src="https://upload.wikimedia.org/wikipedia/commons/2/28/Skewness_Examples_Positive_Skew.png" style="max-width:140px;vertical-align:middle;"><br>
        Mode &lt; Median &lt; Mean. D·ªØ li·ªáu nhi·ªÅu gi√° tr·ªã th·∫•p, √≠t gi√° tr·ªã cao (VD: l∆∞∆°ng).`;
      if(type==="skewN")
        $exp.innerHTML = `<b>L·ªách √¢m (Negative Skew):</b> ƒêu√¥i tr√°i d√†i h∆°n.<br>
        <img src="https://upload.wikimedia.org/wikipedia/commons/f/f8/Skewness_Examples_Negative_Skew.png" style="max-width:140px;vertical-align:middle;"><br>
        Mean &lt; Median &lt; Mode. D·ªØ li·ªáu nhi·ªÅu gi√° tr·ªã cao, √≠t gi√° tr·ªã th·∫•p (VD: ƒëi·ªÉm s·ªë b√†i d·ªÖ).`;
    }
  }
}
function drawData() { view='data'; renderDataChart(); }
function drawDist(type='normal') { view='dist'; renderDistChart(type); }
// --- EVENT LISTENERS ---
document.getElementById('btnData').onclick = () => { drawData(); };
document.getElementById('btnDist').onclick = () => { drawDist('normal'); };
// --- INITIAL ---
drawData();
</script>

        <!-- Timeline th√≠ nghi·ªám -->
        <div id="experiments" class="tab-content">
            <h2>üî¨ Timeline c√°c th√≠ nghi·ªám & ·ª®ng d·ª•ng ti√™u bi·ªÉu</h2>
            <div class="exp-timeline">
                <div class="experiment-card">
                    <div class="experiment-title">Francis Galton ‚Äì Ph√¢n ph·ªëi chu·∫©n (Normal Distribution)</div>
                    <div class="experiment-meta"><span class="exp-year">NƒÉm:</span> 1889</div>
                    <b>M·ª•c ƒë√≠ch:</b> Nghi√™n c·ª©u chi·ªÅu cao ng∆∞·ªùi Anh, ph√°t hi·ªán ph√¢n ph·ªëi chu·∫©n (chu√¥ng).<br>
                    <b>K·∫øt qu·∫£:</b> D·ªØ li·ªáu chi·ªÅu cao ph√¢n b·ªë ƒë·ªëi x·ª©ng quanh gi√° tr·ªã trung b√¨nh.<br>
                    <div class="practical-example"><span class="example-title">V√≠ d·ª• ƒë·ªùi s·ªëng:</span> Ph√¢n b·ªë chi·ªÅu cao, IQ, c√¢n n·∫∑ng ng∆∞·ªùi th∆∞·ªùng l√† ph√¢n ph·ªëi chu·∫©n.</div>
                </div>
                <div class="experiment-card">
                    <div class="experiment-title">Karl Pearson ‚Äì ƒê·ªô l·ªách chu·∫©n & Ph∆∞∆°ng sai</div>
                    <div class="experiment-meta"><span class="exp-year">NƒÉm:</span> 1893</div>
                    <b>M·ª•c ƒë√≠ch:</b> ƒê∆∞a ra kh√°i ni·ªám ƒëo m·ª©c ph√¢n t√°n d·ªØ li·ªáu.<br>
                    <b>K·∫øt qu·∫£:</b> Ph√°t tri·ªÉn kh√°i ni·ªám ƒë·ªô l·ªách chu·∫©n (SD), ph∆∞∆°ng sai (Variance).<br>
                    <div class="practical-example"><span class="example-title">V√≠ d·ª• ƒë·ªùi s·ªëng:</span> N·∫øu SD l·ªõn, ƒëi·ªÉm s·ªë h·ªçc sinh dao ƒë·ªông nhi·ªÅu.</div>
                </div>
                <div class="experiment-card">
                    <div class="experiment-title">Ronald Fisher ‚Äì Ph√¢n t√≠ch ph∆∞∆°ng sai (ANOVA)</div>
                    <div class="experiment-meta"><span class="exp-year">NƒÉm:</span> 1925</div>
                    <b>M·ª•c ƒë√≠ch:</b> So s√°nh s·ª± kh√°c bi·ªát gi·ªØa nhi·ªÅu nh√≥m.<br>
                    <b>K·∫øt qu·∫£:</b> Ph√°t tri·ªÉn ANOVA, d√πng ki·ªÉm ƒë·ªãnh nhi·ªÅu nh√≥m ƒë·ªëi t∆∞·ª£ng c√πng l√∫c.<br>
                    <div class="practical-example"><span class="example-title">V√≠ d·ª• ƒë·ªùi s·ªëng:</span> So s√°nh ƒëi·ªÉm trung b√¨nh 3 l·ªõp b·∫±ng ANOVA thay v√¨ nhi·ªÅu ph√©p t-test.</div>
                </div>
                <div class="experiment-card">
                    <div class="experiment-title">William Sealy Gosset (‚ÄúStudent‚Äù) ‚Äì t-test</div>
                    <div class="experiment-meta"><span class="exp-year">NƒÉm:</span> 1908</div>
                    <b>M·ª•c ƒë√≠ch:</b> So s√°nh trung b√¨nh 2 nh√≥m.<br>
                    <b>K·∫øt qu·∫£:</b> T·∫°o c√¥ng th·ª©c t-test, ·ª©ng d·ª•ng r·ªông r√£i trong t√¢m l√Ω h·ªçc.<br>
                    <div class="practical-example"><span class="example-title">V√≠ d·ª• ƒë·ªùi s·ªëng:</span> So s√°nh ƒëi·ªÉm thi c·ªßa nh√≥m c√≥ luy·ªán t·∫≠p v√† nh√≥m kh√¥ng luy·ªán t·∫≠p.</div>
                </div>
            </div>
        </div>
        <!-- M√¥ h√¨nh & s∆° ƒë·ªì -->
        <div id="models" class="tab-content">
            <h2>üèóÔ∏è S∆° ƒë·ªì & M√¥ h√¨nh Th·ªëng k√™ t√¢m l√Ω h·ªçc</h2>
            <div class="model-diagram">
                <h3>Ph√¢n lo·∫°i th·ªëng k√™</h3>
                <div class="flow-step">Thu th·∫≠p d·ªØ li·ªáu</div>
                <div class="flow-step">Th·ªëng k√™ m√¥ t·∫£</div>
                <div class="flow-step">Th·ªëng k√™ suy lu·∫≠n</div>
                <div class="flow-step">K·∫øt lu·∫≠n/·ª®ng d·ª•ng</div>
            </div>
            <div class="model-diagram">
                <h3>Ph√¢n ph·ªëi chu·∫©n & L·ªách</h3>
                <div class="flow-step">D·ªØ li·ªáu</div>
                <div class="flow-step">Ph√¢n ph·ªëi chu·∫©n</div>
                <div class="flow-step">Ph√¢n ph·ªëi l·ªách d∆∞∆°ng/√¢m</div>
                <div class="flow-step">·ª®ng d·ª•ng ph√©p ƒëo ph√π h·ª£p</div>
            </div>
        </div>
        <!-- ·ª®ng d·ª•ng & bi·ªÉu ƒë·ªì -->
        <div id="applications" class="tab-content">
            <h2>üåü ·ª®ng d·ª•ng, Bi·ªÉu ƒë·ªì & √ù nghƒ©a th·ª±c ti·ªÖn</h2>
            <div class="practical-example">
                <div class="example-title">Bi·ªÉu ƒë·ªì m√¥ t·∫£ th∆∞·ªùng d√πng</div>
                <ul>
                    <li><b>Bi·ªÉu ƒë·ªì c·ªôt (Histogram, Bar chart):</b> Th·ªÉ hi·ªán t·∫ßn su·∫•t, s·ª± kh√°c bi·ªát gi·ªØa c√°c nh√≥m.</li>
                    <li><b>Boxplot:</b> Ki·ªÉm tra ph√¢n ph·ªëi chu·∫©n v√† c√°c ƒëi·ªÉm d·ªã bi·ªát.</li>
                    <li><b>ƒê∆∞·ªùng k·∫ª (Line graph):</b> Bi·ªÉu di·ªÖn m·ªëi quan h·ªá gi·ªØa 2 bi·∫øn s·ªë.</li>
                    <li><b>T√°n x·∫° (Scatter plot):</b> Bi·ªÉu di·ªÖn s·ª©c m·∫°nh quan h·ªá gi·ªØa 2 bi·∫øn.</li>
                </ul>
            </div>
            <div class="practical-example">
                <div class="example-title">·ª®ng d·ª•ng th·ª±c ti·ªÖn</div>
                <ul>
                    <li>D√πng <b>th·ªëng k√™ m√¥ t·∫£</b> ƒë·ªÉ t√≥m t·∫Øt d·ªØ li·ªáu c∆° b·∫£n (tu·ªïi, gi·ªõi t√≠nh, thu nh·∫≠p...)</li>
                    <li>D√πng <b>th·ªëng k√™ suy lu·∫≠n</b> ƒë·ªÉ so s√°nh, ki·ªÉm ƒë·ªãnh gi·∫£ thuy·∫øt gi·ªØa c√°c nh√≥m.</li>
                    <li>Bi·∫øt ph√¢n bi·ªát lo·∫°i d·ªØ li·ªáu & ph√©p ƒëo gi√∫p ch·ªçn ƒë√∫ng c√¥ng c·ª• ph√¢n t√≠ch.</li>
                </ul>
            </div>
        </div>
        <!-- Quiz -->
        <div id="quiz" class="tab-content">
            <h2>üìù Tr·∫Øc nghi·ªám √¥n t·∫≠p</h2>
            <div class="quiz-container" id="quiz-questions"></div>
            <div style="text-align: center; margin-top: 28px;">
                <button class="demo-button" onclick="calculateScore()">T√≠nh ƒëi·ªÉm</button>
                <button class="demo-button" style="margin-left:10px;" onclick="resetQuiz()">L√†m l·∫°i</button>
                <div id="finalScore" style="margin-top: 15px; font-size: 1.18em; font-weight: bold;"></div>
            </div>
        </div>
    </div>
</div>

<script>
    function showTab(tabName) {
        document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
        document.getElementById(tabName).classList.add('active');
        event.target.classList.add('active');
        if (tabName === 'quiz') resetQuiz();
    }

    // Quiz Data
    const quizQuestions = [
        {
            q: "Kh√°i ni·ªám 'mean' trong th·ªëng k√™ l√† g√¨?",
            a: [
                "A. Gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t trong d√£y s·ªë",
                "B. Gi√° tr·ªã trung b√¨nh c·ªông c·ªßa c√°c s·ªë",
                "C. Gi√° tr·ªã ·ªü gi·ªØa d√£y s·ªë ƒë√£ s·∫Øp x·∫øp",
                "D. ƒê·ªô ph√¢n t√°n c·ªßa d√£y s·ªë"
            ],
            correct: 1
        },
        {
            q: "Th·ªëng k√™ m√¥ t·∫£ c√≥ ch·ª©c nƒÉng ch√≠nh n√†o?",
            a: [
                "A. T√≥m t·∫Øt v√† tr√¨nh b√†y d·ªØ li·ªáu b·∫±ng s·ªë ho·∫∑c bi·ªÉu ƒë·ªì",
                "B. Ki·ªÉm ƒë·ªãnh gi·∫£ thuy·∫øt",
                "C. D·ª± b√°o xu h∆∞·ªõng t∆∞∆°ng lai",
                "D. T·∫°o d·ªØ li·ªáu m·ªõi"
            ],
            correct: 0
        },
        {
            q: "ƒêi·ªÉm trung v·ªã (median) l√† g√¨?",
            a: [
                "A. Gi√° tr·ªã ·ªü gi·ªØa d√£y s·ªë ƒë√£ s·∫Øp x·∫øp",
                "B. Gi√° tr·ªã th·∫•p nh·∫•t",
                "C. Gi√° tr·ªã cao nh·∫•t",
                "D. T·ªïng t·∫•t c·∫£ c√°c gi√° tr·ªã"
            ],
            correct: 0
        },
        {
            q: "Mode (y·∫øu v·ªã) l√†:",
            a: [
                "A. Gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t trong d√£y s·ªë",
                "B. Gi√° tr·ªã ·ªü gi·ªØa",
                "C. T·ªïng c√°c gi√° tr·ªã",
                "D. Gi√° tr·ªã ph√¢n t√°n nh·∫•t"
            ],
            correct: 0
        },
        {
            q: "Th·ªëng k√™ suy lu·∫≠n d√πng ƒë·ªÉ l√†m g√¨?",
            a: [
                "A. T√≥m t·∫Øt d·ªØ li·ªáu m·∫´u",
                "B. Suy ra ƒë·∫∑c ƒëi·ªÉm c·ªßa to√†n b·ªô d√¢n s·ªë d·ª±a tr√™n m·∫´u",
                "C. Ch·ªâ v·∫Ω bi·ªÉu ƒë·ªì",
                "D. S·∫Øp x·∫øp d·ªØ li·ªáu"
            ],
            correct: 1
        },
        {
            q: "Ch·ªâ s·ªë ƒëo ƒë·ªô ph√¢n t√°n c·ªßa d·ªØ li·ªáu quanh gi√° tr·ªã trung b√¨nh l√†:",
            a: [
                "A. Mean",
                "B. Mode",
                "C. Standard deviation (ƒê·ªô l·ªách chu·∫©n)",
                "D. Median"
            ],
            correct: 2
        },
        {
            q: "Ph√¢n ph·ªëi chu·∫©n (normal distribution) l√†:",
            a: [
                "A. D·ªØ li·ªáu t·∫≠p trung v·ªÅ 1 ph√≠a",
                "B. D·ªØ li·ªáu ph√¢n b·ªë ƒë·ªëi x·ª©ng quanh trung b√¨nh",
                "C. Ch·ªâ c√≥ m·ªôt gi√° tr·ªã duy nh·∫•t",
                "D. D·ªØ li·ªáu kh√¥ng th·ªÉ hi·ªán qua ƒë·ªì th·ªã"
            ],
            correct: 1
        },
        {
            q: "ƒê·∫∑c ƒëi·ªÉm c·ªßa thang ƒëo ƒë·ªãnh danh (nominal):",
            a: [
                "A. C√≥ th·ª© b·∫≠c r√µ r√†ng",
                "B. G√°n m√£ cho thu·ªôc t√≠nh, kh√¥ng c√≥ th·ª© b·∫≠c",
                "C. C√≥ kho·∫£ng c√°ch ƒë·ªÅu gi·ªØa c√°c gi√° tr·ªã",
                "D. C√≥ gi√° tr·ªã 0 tuy·ªát ƒë·ªëi"
            ],
            correct: 1
        },
        {
            q: "Bi·ªÉu ƒë·ªì n√†o th∆∞·ªùng d√πng ƒë·ªÉ ki·ªÉm tra ph√¢n ph·ªëi chu·∫©n & ƒëi·ªÉm d·ªã bi·ªát?",
            a: [
                "A. Bar chart",
                "B. Boxplot",
                "C. Pie chart",
                "D. Scatter plot"
            ],
            correct: 1
        },
        {
            q: "C√¥ng th·ª©c t√≠nh mean (trung b√¨nh):",
            a: [
                "A. T·ªïng t·∫•t c·∫£ gi√° tr·ªã chia cho s·ªë l∆∞·ª£ng gi√° tr·ªã",
                "B. Gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t",
                "C. Gi√° tr·ªã ·ªü gi·ªØa",
                "D. Gi√° tr·ªã nh·ªè nh·∫•t tr·ª´ gi√° tr·ªã l·ªõn nh·∫•t"
            ],
            correct: 0
        },
        {
            q: "Th√≠ nghi·ªám n√†o li√™n quan ƒë·∫øn ki·ªÉm tra s·ª± kh√°c bi·ªát gi·ªØa hai nh√≥m?",
            a: [
                "A. ANOVA",
                "B. t-test",
                "C. Histogram",
                "D. Scatter plot"
            ],
            correct: 1
        },
        {
            q: "Ai l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ph√°t hi·ªán ph√¢n ph·ªëi chu·∫©n trong th·ªëng k√™?",
            a: [
                "A. William Gosset",
                "B. Francis Galton",
                "C. Ronald Fisher",
                "D. Karl Pearson"
            ],
            correct: 1
        },
        {
            q: "Ph√¢n ph·ªëi l·ªách d∆∞∆°ng l√† nh∆∞ th·∫ø n√†o?",
            a: [
                "A. ƒêu√¥i d√†i v·ªÅ b√™n ph·∫£i",
                "B. ƒê·ªânh l·ªách v·ªÅ b√™n tr√°i",
                "C. D·ªØ li·ªáu ph√¢n t√°n ƒë·ªÅu",
                "D. Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c"
            ],
            correct: 0
        },
        {
            q: "Standard deviation c√†ng nh·ªè th·ªÉ hi·ªán:",
            a: [
                "A. D·ªØ li·ªáu ph√¢n t√°n nhi·ªÅu",
                "B. D·ªØ li·ªáu t·∫≠p trung g·∫ßn mean",
                "C. D·ªØ li·ªáu ƒë·ªÅu nhau",
                "D. D·ªØ li·ªáu ng·∫´u nhi√™n"
            ],
            correct: 1
        },
        {
            q: "√ù nghƒ©a th·ª±c ti·ªÖn c·ªßa th·ªëng k√™ trong t√¢m l√Ω h·ªçc?",
            a: [
                "A. Gi√∫p m√¥ t·∫£, ph√¢n t√≠ch, ki·ªÉm ƒë·ªãnh v√† r√∫t ra k·∫øt lu·∫≠n khoa h·ªçc t·ª´ d·ªØ li·ªáu",
                "B. Ch·ªâ d√πng ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì",
                "C. Kh√¥ng c√≥ gi√° tr·ªã th·ª±c ti·ªÖn",
                "D. Ch·ªâ d√†nh cho to√°n h·ªçc"
            ],
            correct: 0
        }
    ];

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    let score = 0, answeredQuestions = 0, currentQuiz = [];

    function renderQuiz() {
        const quizContainer = document.getElementById('quiz-questions');
        quizContainer.innerHTML = '';
        score = 0;
        answeredQuestions = 0;

        // Deep copy and shuffle questions
        currentQuiz = quizQuestions.map(q => {
            const answerObjs = q.a.map((text, idx) => ({
                text,
                isCorrect: idx === q.correct
            }));
            shuffleArray(answerObjs);
            return { q: q.q, answers: answerObjs };
        });
        shuffleArray(currentQuiz);

        currentQuiz.forEach((qObj, i) => {
            const opts = qObj.answers.map(aObj =>
                `<li onclick="checkAnswer(this, ${aObj.isCorrect})">${aObj.text}</li>`
            ).join('');
            quizContainer.innerHTML += `
                <div class="question">
                    <h4>${qObj.q}</h4>
                    <ul class="options">${opts}</ul>
                </div>
            `;
        });

        document.getElementById('finalScore').innerText = '';
    }

    function checkAnswer(element, isCorrect) {
        const question = element.closest('.question');
        if (question.classList.contains('answered')) return;
        question.classList.add('answered');
        answeredQuestions++;
        const options = question.querySelectorAll('.options li');
        options.forEach(option => { option.style.pointerEvents = 'none'; option.style.opacity = '0.7'; });
        if (isCorrect) {
            element.style.backgroundColor = '#d4edda'; element.style.color = '#155724'; element.style.border = '2px solid #28a745'; score++;
        } else {
            element.style.backgroundColor = '#f8d7da'; element.style.color = '#721c24'; element.style.border = '2px solid #dc3545';
            options.forEach(option => {
                if (option.onclick && option.onclick.toString().includes('true')) {
                    option.style.backgroundColor = '#d4edda';
                }
            });
        }
    }
    function calculateScore() {
        document.getElementById('finalScore').innerText = `B·∫°n ƒë√∫ng ${score}/${quizQuestions.length} c√¢u!`;
    }
    function resetQuiz() {
        renderQuiz();
    }
    renderQuiz();
</script>
</body>
</html>
